export default [
    { "name": "cmdline_arg", "doc": "## Name\nfunction::cmdline_arg — \n     Fetch a command line argument\n\n\n\n## Synopsis\n\n\n    cmdline_arg:string(n:long)\n\n\n## Arguments\nArgument to get (zero is the program itself)\n\n\n\n## Description\nReturns argument the requested argument from the\n   current process or the empty string when there are not that many\n   arguments or there is a problem retrieving the argument. Argument\n   zero is traditionally the command itself.\n\n\n\n" },
    { "name": "callers", "doc": "## Name\nfunction::callers — \n  Return first n elements of kernel stack backtrace\n\n\n\n## Synopsis\n\n\n    callers:string(n:long)\n\n\n## Arguments\nnumber of levels to descend in the stack (not counting the top\n     level). If n is -1, print the entire stack.\n\n\n\n## Description\nThis function returns a string of the first n hex\n   addresses from the backtrace of the kernel stack. Output may be\n   truncated as per maximum string length (MAXSTRINGLEN).\n\n\n\n" },
    { "name": "backtrace", "doc": "## Name\nfunction::backtrace — \n     Hex backtrace of current kernel stack\n\n\n\n## Synopsis\n\n\n    backtrace:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns a string of hex addresses\n   that are a backtrace of the kernel stack. Output may be truncated\n   as per maximum string length (MAXSTRINGLEN).  See\n   ubacktrace for user-space backtrace.\n\n\n\n" },
    { "name": "caller_addr", "doc": "## Name\nfunction::caller_addr — \n     Return caller address\n\n\n\n## Synopsis\n\n\n    caller_addr:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the address of the calling function.\n\n\n\n" },
    { "name": "asmlinkage", "doc": "## Name\nfunction::asmlinkage — \n     Mark function as declared asmlinkage\n\n\n\n## Synopsis\n\n\n    asmlinkage()\n\n\n## Arguments\nNone\n\n\n\n## Description\nCall this function before accessing arguments\n   using the *_arg functions\n   if the probed kernel function was declared asmlinkage in the source.\n\n\n\n" },
    { "name": "cmdline_args", "doc": "## Name\nfunction::cmdline_args — \n     Fetch command line arguments from current process\n\n\n\n## Synopsis\n\n\n    cmdline_args:string(n:long,m:long,delim:string)\n\n\n## Arguments\nFirst argument to get (zero is normally the program itself)\n    \n     Last argument to get (or minus one for all arguments after n)\n    \n     String to use to separate arguments when more than one.\n\n\n\n## Description\nReturns arguments from the current process starting\n   with argument number n, up to argument m. If there are less than n\n   arguments, or the arguments cannot be retrieved from the current\n   process, the empty string is returned. If m is smaller than n then\n   all arguments starting from argument n are returned. Argument zero\n   is traditionally the command itself.\n\n\n\n" },
    { "name": "addr", "doc": "## Name\nfunction::addr — \n     Address of the current probe point.\n\n\n\n## Synopsis\n\n\n    addr:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns the instruction pointer from the current probe's\n   register state.  Not all probe types have registers though, in which case\n   zero is returned.  The returned address is suitable for use with functions\n   like symname and symdata.\n\n\n\n" },
    { "name": "cpu", "doc": "## Name\nfunction::cpu — \n     Returns the current cpu number\n\n\n\n## Synopsis\n\n\n    cpu:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the current cpu number.\n\n\n\n" },
    { "name": "euid", "doc": "## Name\nfunction::euid — \n     Return the effective uid of a target process\n\n\n\n## Synopsis\n\n\n    euid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns the effective user ID of the target process.\n\n\n\n" },
    { "name": "cmdline_str", "doc": "## Name\nfunction::cmdline_str — \n     Fetch all command line arguments from current process\n\n\n\n## Synopsis\n\n\n    cmdline_str:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns all arguments from the current process\n   delimited by spaces. Returns the empty string when the arguments\n   cannot be retrieved.\n\n\n\n" },
    { "name": "egid", "doc": "## Name\nfunction::egid — \n     Returns the effective gid of a target process\n\n\n\n## Synopsis\n\n\n    egid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the effective gid of a target process\n\n\n\n" },
    { "name": "current_exe_file", "doc": "## Name\nfunction::current_exe_file — \n     get the file struct pointer for the current task's executable file\n\n\n\n## Synopsis\n\n\n    current_exe_file:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the file struct pointer for the\n   current task's executable file. Note that the file struct pointer\n   isn't locked on return. The return value of this function can be\n   passed to fullpath_struct_file to get the path from the file\n   struct.\n\n\n\n" },
    { "name": "cpuid", "doc": "## Name\nfunction::cpuid — \n     Returns the current cpu number\n\n\n\n## Synopsis\n\n\n    cpuid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the current cpu number.\n   Deprecated in SystemTap 1.4 and removed in SystemTap 1.5.\n\n\n\n" },
    { "name": "env_var", "doc": "## Name\nfunction::env_var — \n  Fetch environment variable from current process\n\n\n\n## Synopsis\n\n\n    env_var:string(name:string)\n\n\n## Arguments\nName of the environment variable to fetch\n\n\n\n## Description\nReturns the contents of the specified environment value\n   for the current process. If the variable isn't set an empty string\n   is returned.\n\n\n\n" },
    { "name": "caller", "doc": "## Name\nfunction::caller — \n     Return name and address of calling function\n\n\n\n## Synopsis\n\n\n    caller:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the address and name of the \n   calling function. This is equivalent to calling:\n   sprintf(“s 0xx”, symname(caller_addr), caller_addr)\n\n\n\n" },
    { "name": "execname", "doc": "## Name\nfunction::execname — \n  Returns the execname of a target process (or group of processes)\n\n\n\n## Synopsis\n\n\n    execname:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns the execname of a target process (or group of processes).\n\n\n\n" },
    { "name": "int_arg", "doc": "## Name\nfunction::int_arg — \n     Return function argument as signed int\n\n\n\n## Synopsis\n\n\n    int_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the value of argument n as a signed int\n   (i.e., a 32-bit integer sign-extended to 64 bits).\n\n\n\n" },
    { "name": "gid", "doc": "## Name\nfunction::gid — \n     Returns the group ID of a target process\n\n\n\n## Synopsis\n\n\n    gid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the group ID of a target process.\n\n\n\n" },
    { "name": "fastcall", "doc": "## Name\nfunction::fastcall — \n     Mark function as declared fastcall\n\n\n\n## Synopsis\n\n\n    fastcall()\n\n\n## Arguments\nNone\n\n\n\n## Description\nCall this function before accessing arguments\n   using the *_arg functions\n   if the probed kernel function was declared fastcall in the source.\n\n\n\n" },
    { "name": "is_return", "doc": "## Name\nfunction::is_return — \n     Whether the current probe context is a return probe\n\n\n\n## Synopsis\n\n\n    is_return:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns 1 if the current probe context is a return probe,\n   returns 0 otherwise.\n\n\n\n" },
    { "name": "long_arg", "doc": "## Name\nfunction::long_arg — \n     Return function argument as signed long\n\n\n\n## Synopsis\n\n\n    long_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the value of argument n as a signed long.\n   On architectures where a long is 32 bits, the value is sign-extended\n   to 64 bits.\n\n\n\n" },
    { "name": "is_myproc", "doc": "## Name\nfunction::is_myproc — \n     Determines if the current probe point has occurred in the user's own process\n\n\n\n## Synopsis\n\n\n    is_myproc:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns 1 if the current probe\n   point has occurred in the user's own process.\n\n\n\n" },
    { "name": "longlong_arg", "doc": "## Name\nfunction::longlong_arg — \n     Return function argument as 64-bit value\n\n\n\n## Synopsis\n\n\n    longlong_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the value of argument n as a 64-bit value.\n\n\n\n" },
    { "name": "module_name", "doc": "## Name\nfunction::module_name — \n     The module name of the current script\n\n\n\n## Synopsis\n\n\n    module_name:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the name of the stap module.\n   Either generated randomly (stap_[0-9a-f]+_[0-9a-f]+)\n   or set by stap -m <module_name>.\n\n\n\n" },
    { "name": "module_size", "doc": "## Name\nfunction::module_size — \n     The module size of the current script\n\n\n\n## Synopsis\n\n\n    module_size:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the sizes of various sections\n   of the stap module.\n\n\n\n" },
    { "name": "ns_euid", "doc": "## Name\nfunction::ns_euid — \n     Returns the effective user ID of a target process as seen in a user namespace\n\n\n\n## Synopsis\n\n\n    ns_euid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the effective user ID of the target process as seen in the target user namespace if provided, or the stap process namespace.\n\n\n\n" },
    { "name": "ns_pgrp", "doc": "## Name\nfunction::ns_pgrp — \n     Returns the process group ID of the current process as seen in a pid namespace\n\n\n\n## Synopsis\n\n\n    ns_pgrp:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the process group ID of the\n   current process as seen in  the target pid namespace if provided, or the stap process namespace.\n\n\n\n" },
    { "name": "ns_gid", "doc": "## Name\nfunction::ns_gid — \n     Returns the group ID of a target process as seen in a user namespace\n\n\n\n## Synopsis\n\n\n    ns_gid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the group ID of a target process as seen in the target user namespace if provided, or the stap process namespace.\n\n\n\n" },
    { "name": "ns_pid", "doc": "## Name\nfunction::ns_pid — \n     Returns the ID of a target process as seen in a pid namespace\n\n\n\n## Synopsis\n\n\n    ns_pid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the ID of a target process as seen in\n   the target pid namespace.\n\n\n\n" },
    { "name": "ns_ppid", "doc": "## Name\nfunction::ns_ppid — \n     Returns the process ID of a target process's parent process as seen in a pid namespace\n\n\n\n## Synopsis\n\n\n    ns_ppid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function return the process ID of the target proccess's parent process as seen in  the target pid namespace if provided, or the stap process namespace.\n\n\n\n" },
    { "name": "ns_sid", "doc": "## Name\nfunction::ns_sid — \n     Returns the session ID of the current process as seen in a pid namespace\n\n\n\n## Synopsis\n\n\n    ns_sid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThe namespace-aware session ID of a process is the process group ID\n   of the session leader as seen in  the target pid namespace if provided, or the stap process namespace. Session ID is stored in the signal_struct\n   since Kernel 2.6.0.\n\n\n\n" },
    { "name": "modname", "doc": "## Name\nfunction::modname — \n     Return the kernel module name loaded at the address\n\n\n\n## Synopsis\n\n\n    modname:string(addr:long)\n\n\n## Arguments\nThe address to map to a kernel module name\n\n\n\n## Description\nReturns the module name associated with the given\n   address if known. If not known it will raise an error. If the\n   address was not in a kernel module, but in the kernel itself, then\n   the string “kernel” will be returned.\n\n\n\n" },
    { "name": "ns_tid", "doc": "## Name\nfunction::ns_tid — \n     Returns the thread ID of a target process as seen in a pid namespace\n\n\n\n## Synopsis\n\n\n    ns_tid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the thread ID of a target process as seen\n   in  the target pid namespace if provided, or the stap process namespace.\n\n\n\n" },
    { "name": "ns_uid", "doc": "## Name\nfunction::ns_uid — \n     Returns the user ID of a target process as seen in a user namespace\n\n\n\n## Synopsis\n\n\n    ns_uid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the user ID of the target process as seen in the target user namespace if provided, or the stap process namespace.\n\n\n\n" },
    { "name": "pexecname", "doc": "## Name\nfunction::pexecname — \n     Returns the execname of a target process's parent process\n\n\n\n## Synopsis\n\n\n    pexecname:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the execname of a target\n   process's parent procces.\n\n\n\n" },
    { "name": "ns_egid", "doc": "## Name\nfunction::ns_egid — \n     Returns the effective gid of a target process as seen in a user namespace\n\n\n\n## Synopsis\n\n\n    ns_egid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the effective gid of a target process as seen in the target user namespace if provided, or the stap process namespace\n\n\n\n" },
    { "name": "pgrp", "doc": "## Name\nfunction::pgrp — \n     Returns the process group ID of the current process\n\n\n\n## Synopsis\n\n\n    pgrp:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the process group ID of the\n   current process.\n\n\n\n" },
    { "name": "pid", "doc": "## Name\nfunction::pid — \n     Returns the ID of a target process\n\n\n\n## Synopsis\n\n\n    pid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the ID of a target process.\n\n\n\n" },
    { "name": "pid2execname", "doc": "## Name\nfunction::pid2execname — \n     The name of the given process identifier\n\n\n\n## Synopsis\n\n\n    pid2execname:string(pid:long)\n\n\n## Arguments\nprocess identifier\n\n\n\n## Description\nReturn the name of the given process id.\n\n\n\n" },
    { "name": "pid2task", "doc": "## Name\nfunction::pid2task — \n     The task_struct of the given process identifier\n\n\n\n## Synopsis\n\n\n    pid2task:long(pid:long)\n\n\n## Arguments\nprocess identifier\n\n\n\n## Description\nReturn the task struct of the given process id.\n\n\n\n" },
    { "name": "pnlabel", "doc": "## Name\nfunction::pnlabel — \n     Returns the label name parsed from the probe name\n\n\n\n## Synopsis\n\n\n    pnlabel:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis returns the label name as parsed from the\n   script-level probe point. This function will only work if called\n   directly from the body of a '.label' probe point (i.e. no aliases).\n\n\n\n## Context\nThe current probe point.\n\n\n\n" },
    { "name": "pn", "doc": "## Name\nfunction::pn — \n  Returns the active probe name\n\n\n\n## Synopsis\n\n\n    pn:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the script-level probe point\n   associated with a currently running probe handler, including\n   wild-card expansion effects. Context: The current probe point.\n\n\n\n" },
    { "name": "pointer_arg", "doc": "## Name\nfunction::pointer_arg — \n     Return function argument as pointer value\n\n\n\n## Synopsis\n\n\n    pointer_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the unsigned value of argument n, same as ulong_arg.\n   Can be used with any type of pointer.\n\n\n\n" },
    { "name": "pp", "doc": "## Name\nfunction::pp — \n     Returns the active probe point\n\n\n\n## Synopsis\n\n\n    pp:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the fully-resolved probe point\n   associated with a currently running probe handler, including alias\n   and wild-card expansion effects. Context: The current probe point.\n\n\n\n" },
    { "name": "ppfunc", "doc": "## Name\nfunction::ppfunc — \n     Returns the function name parsed from pp\n\n\n\n## Synopsis\n\n\n    ppfunc:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis returns the function name from the current pp.\n   Not all pp have functions in them, in which case \"\" is returned.\n\n\n\n" },
    { "name": "ppid", "doc": "## Name\nfunction::ppid — \n     Returns the process ID of a target process's parent process\n\n\n\n## Synopsis\n\n\n    ppid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function return the process ID of the target proccess's parent process.\n\n\n\n" },
    { "name": "print_backtrace", "doc": "## Name\nfunction::print_backtrace — \n  Print kernel stack back trace\n\n\n\n## Synopsis\n\n\n    print_backtrace()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function is equivalent to print_stack(backtrace), \n   except that deeper stack nesting may be supported.  See print_ubacktrace\n   for user-space backtrace.\n   The function does not return a value.\n\n\n\n" },
    { "name": "print_regs", "doc": "## Name\nfunction::print_regs — \n  Print a register dump\n\n\n\n## Synopsis\n\n\n    print_regs()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function prints a register dump. Does nothing if no registers are available for the probe point.\n\n\n\n" },
    { "name": "print_syms", "doc": "## Name\nfunction::print_syms — \n     Print out kernel stack from string\n\n\n\n## Synopsis\n\n\n    print_syms(callers:string)\n\n\n## Arguments\nString with list of hexadecimal (kernel) addresses\n\n\n\n## Description\nThis function performs a symbolic lookup of the addresses\n   in the given string,\n   which are assumed to be the result of prior calls to stack,\n   callers, and similar functions.\n   \n\n   Prints one line per address, including the address, the\n   name of the function containing the address, and an estimate of\n   its position within that function, as obtained by symdata.\n   Returns nothing.\n\n\n\n" },
    { "name": "print_stack", "doc": "## Name\nfunction::print_stack — \n     Print out kernel stack from string\n\n\n\n## Synopsis\n\n\n    print_stack(stk:string)\n\n\n## Arguments\nString with list of hexadecimal addresses\n\n\n\n## Description\nThis function performs a symbolic lookup of the addresses\n   in the given  string,\n   which is assumed to be the result of a prior call to \n   backtrace.\n   \n\n   Print one line per address, including the address, the\n   name  of the function containing the address, and an estimate of\n   its position within that function.  Return nothing.\n\n\n\n## NOTE\nit is recommended to use print_syms instead of this function.\n\n\n\n" },
    { "name": "print_ubacktrace_brief", "doc": "## Name\nfunction::print_ubacktrace_brief — \n     Print stack back trace for current user-space task.\n\n\n\n## Synopsis\n\n\n    print_ubacktrace_brief()\n\n\n## Arguments\nNone\n\n\n\n## Description\nEquivalent to print_ubacktrace, but output for each symbol is\n   shorter (just name and offset, or just the hex address of no symbol\n   could be found).\n\n\n\n## Note\nTo get (full) backtraces for user space applications and shared\n   shared libraries not mentioned in the current script run stap with\n   -d /path/to/exe-or-so and/or add --ldd to load all needed unwind data.\n\n\n\n" },
    { "name": "print_ustack", "doc": "## Name\nfunction::print_ustack — \n     Print out stack for the current task from string.\n\n\n\n## Synopsis\n\n\n    print_ustack(stk:string)\n\n\n## Arguments\nString with list of hexadecimal addresses for the current task.\n\n\n\n## Description\nPerform a symbolic lookup of the addresses in the given string,\n   which is assumed to be the result of a prior call to \n   ubacktrace for the current task.\n   \n\n   Print one line per address, including the address, the\n   name  of the function containing the address, and an estimate of\n   its position within that function.  Return nothing.\n\n\n\n## NOTE\nit is recommended to use print_usyms instead of this function.\n\n\n\n" },
    { "name": "print_ubacktrace", "doc": "## Name\nfunction::print_ubacktrace — \n  Print stack back trace for current user-space task.\n\n\n\n## Synopsis\n\n\n    print_ubacktrace()\n\n\n## Arguments\nNone\n\n\n\n## Description\nEquivalent to print_ustack(ubacktrace), except that deeper stack\n   nesting may be supported.  Returns nothing.  See print_backtrace\n   for kernel backtrace.\n\n\n\n## Note\nTo get (full) backtraces for user space applications and shared\n   shared libraries not mentioned in the current script run stap with\n   -d /path/to/exe-or-so and/or add --ldd to load all needed unwind data.\n\n\n\n" },
    { "name": "probe_type", "doc": "## Name\nfunction::probe_type — \n     The low level probe handler type of the current probe.\n\n\n\n## Synopsis\n\n\n    probe_type:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns a short string describing the low level probe handler\n   type for the current probe point. This is for informational purposes only.\n   Depending on the low level probe handler different context functions can\n   or cannot provide information about the current event (for example some\n   probe handlers only trigger in user space and have no associated kernel\n   context). High-level probes might map to the same or different low-level\n   probes (depending on systemtap version and/or kernel used).\n\n\n\n" },
    { "name": "probefunc", "doc": "## Name\nfunction::probefunc — \n     Return the probe point's function name, if known\n\n\n\n## Synopsis\n\n\n    probefunc:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the name of the function being probed\n   based on the current address, as computed by symname(addr) or\n   usymname(uaddr) depending on probe context (whether the probe is\n   a user probe or a kernel probe).\n\n\n\n## Please note\nthis function's behaviour differs between SystemTap 2.0\n   and earlier versions. Prior to 2.0, probefunc obtained the function\n   name from the probe point string as returned by pp, and used the\n   current address as a fallback.\n   \n\n   Consider using ppfunc instead.\n\n\n\n" },
    { "name": "probemod", "doc": "## Name\nfunction::probemod — \n     Return the probe point's kernel module name\n\n\n\n## Synopsis\n\n\n    probemod:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the name of the kernel module\n   containing the probe point, if known.\n\n\n\n" },
    { "name": "pstrace", "doc": "## Name\nfunction::pstrace — \n  Chain of processes and pids back to init(1)\n\n\n\n## Synopsis\n\n\n    pstrace:string(task:long)\n\n\n## Arguments\nPointer to task struct of process\n\n\n\n## Description\nThis function returns a string listing execname and pid for each\n   process starting from task back to the process ancestor\n   that init(1) spawned.\n\n\n\n" },
    { "name": "register", "doc": "## Name\nfunction::register — \n  Return the signed value of the named CPU register\n\n\n\n## Synopsis\n\n\n    register:long(name:string)\n\n\n## Arguments\nName of the register to return\n\n\n\n## Description\nReturn the value of the named CPU register,\n   as it was saved when the current probe point was hit.\n   If the register is 32 bits, it is sign-extended to 64 bits.\n   \n\n   For the i386 architecture, the following names are recognized.\n   (name1/name2 indicates that name1 and name2 are alternative names\n   for the same register.)\n   eax/ax, ebp/bp, ebx/bx, ecx/cx, edi/di, edx/dx, eflags/flags,\n   eip/ip, esi/si, esp/sp, orig_eax/orig_ax,\n   xcs/cs, xds/ds, xes/es, xfs/fs, xss/ss.\n   \n\n   For the x86_64 architecture, the following names are recognized:\n   64-bit registers:\n   r8, r9, r10, r11, r12, r13, r14, r15,\n   rax/ax, rbp/bp, rbx/bx, rcx/cx, rdi/di, rdx/dx,\n   rip/ip, rsi/si, rsp/sp;\n   32-bit registers:\n   eax, ebp, ebx, ecx, edx, edi, edx, eip, esi, esp, flags/eflags,\n   orig_eax; segment registers: xcs/cs, xss/ss.\n   \n\n   For powerpc, the following names are recognized:\n   r0, r1, ... r31, nip, msr, orig_gpr3, ctr, link, xer, ccr, softe, trap,\n   dar, dsisr, result.\n   \n\n   For s390x, the following names are recognized:\n   r0, r1, ... r15, args, psw.mask, psw.addr, orig_gpr2, ilc, trap.\n   \n\n   For AArch64, the following names are recognized:\n   x0, x1, ... x30, fp, lr, sp, pc, and orig_x0.\n\n\n\n" },
    { "name": "registers_valid", "doc": "## Name\nfunction::registers_valid — \n     Determines validity of register and u_register in current context\n\n\n\n## Synopsis\n\n\n    registers_valid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns 1 if register and u_register\n   can be used in the current context, or 0 otherwise.\n   For example, registers_valid returns 0\n   when called from a begin or end probe.\n\n\n\n" },
    { "name": "regparm", "doc": "## Name\nfunction::regparm — \n     Specify regparm value used to compile function\n\n\n\n## Synopsis\n\n\n    regparm(n:long)\n\n\n## Arguments\noriginal regparm value\n\n\n\n## Description\nCall this function with argument n before accessing function\n   arguments using the *_arg function is the function was build with the\n   gcc -mregparm=n option.\n   \n\n   (The i386 kernel is built with \\-mregparm=3, so systemtap considers\n   regparm(3) the default for kernel functions on that architecture.)\n   Only valid on i386 and x86_64 (when probing 32bit applications).\n   Produces an error on other architectures.\n\n\n\n" },
    { "name": "remote_id", "doc": "## Name\nfunction::remote_id — \n     The index of this instance in a remote execution.\n\n\n\n## Synopsis\n\n\n    remote_id:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns a number 0..N, which is the unique\n   index of this particular script execution from a swarm of\n   “stap --remote A --remote B ...” runs, and is the same number\n   “stap --remote-prefix” would print.  The function returns -1 if the\n   script was not launched with “stap --remote”, or if the remote\n   staprun/stapsh are older than version 1.7.\n\n\n\n" },
    { "name": "remote_uri", "doc": "## Name\nfunction::remote_uri — \n     The name of this instance in a remote execution.\n\n\n\n## Synopsis\n\n\n    remote_uri:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the remote host used to invoke\n   this particular script execution from a swarm of “stap --remote” runs.\n   It may not be unique among the swarm.\n   The function returns an empty string if the script was not launched with\n   “stap --remote”.\n\n\n\n" },
    { "name": "s64_arg", "doc": "## Name\nfunction::s64_arg — \n     Return function argument as signed 64-bit value\n\n\n\n## Synopsis\n\n\n    s64_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the signed 64-bit value of argument n,\n   same as longlong_arg.\n\n\n\n" },
    { "name": "sid", "doc": "## Name\nfunction::sid — \n     Returns the session ID of the current process\n\n\n\n## Synopsis\n\n\n    sid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThe session ID of a process is the process group ID\n   of the session leader. Session ID is stored in the signal_struct\n   since Kernel 2.6.0.\n\n\n\n" },
    { "name": "s32_arg", "doc": "## Name\nfunction::s32_arg — \n     Return function argument as signed 32-bit value\n\n\n\n## Synopsis\n\n\n    s32_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the signed 32-bit value of argument n,\n   same as int_arg.\n\n\n\n" },
    { "name": "sprint_backtrace", "doc": "## Name\nfunction::sprint_backtrace — \n     Return stack back trace as string\n\n\n\n## Synopsis\n\n\n    sprint_backtrace:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns a simple (kernel) backtrace. One line per address.\n   Includes the symbol name (or hex address if symbol\n   couldn't be resolved) and module name (if found). Includes the\n   offset from the start of the function if found, otherwise the\n   offset will be added to the module (if found, between\n   brackets). Returns the backtrace as string (each line terminated by\n   a newline character).  Note that the returned stack will be\n   truncated to MAXSTRINGLEN, to print fuller and richer stacks use\n   print_backtrace. Equivalent to sprint_stack(backtrace),\n   but more efficient (no need to translate between hex strings and\n   final backtrace string).\n\n\n\n" },
    { "name": "sprint_syms", "doc": "## Name\nfunction::sprint_syms — \n     Return stack for kernel addresses from string\n\n\n\n## Synopsis\n\n\n    sprint_syms(callers:string)\n\n\n## Arguments\nString with list of hexadecimal (kernel) addresses\n\n\n\n## Description\nPerform a symbolic lookup of the addresses in the given string,\n   which are assumed to be the result of a prior calls to stack,\n   callers, and similar functions.\n   \n\n   Returns a simple backtrace from the given hex string. One line per\n   address. Includes the symbol name (or hex address if symbol\n   couldn't be resolved) and module name (if found), as obtained from\n   symdata. Includes the offset from the start of the function if\n   found, otherwise the offset will be added to the module (if found, between\n   brackets). Returns the backtrace as string (each line terminated by\n   a newline character).  Note that the returned stack will be\n   truncated to MAXSTRINGLEN, to print fuller and richer stacks use\n   print_syms.\n\n\n\n" },
    { "name": "sprint_stack", "doc": "## Name\nfunction::sprint_stack — \n     Return stack for kernel addresses from string\n\n\n\n## Synopsis\n\n\n    sprint_stack:string(stk:string)\n\n\n## Arguments\nString with list of hexadecimal (kernel) addresses\n\n\n\n## Description\nPerform a symbolic lookup of the addresses in the given string,\n   which is assumed to be the result of a prior call to backtrace.\n   \n\n   Returns a simple backtrace from the given hex string. One line per\n   address. Includes the symbol name (or hex address if symbol\n   couldn't be resolved) and module name (if found). Includes the\n   offset from the start of the function if found, otherwise the\n   offset will be added to the module (if found, between\n   brackets). Returns the backtrace as string (each line terminated by\n   a newline character).  Note that the returned stack will be\n   truncated to MAXSTRINGLEN, to print fuller and richer stacks use\n   print_stack.\n\n\n\n## NOTE\nit is recommended to use sprint_syms instead of this function.\n\n\n\n" },
    { "name": "sprint_ubacktrace", "doc": "## Name\nfunction::sprint_ubacktrace — \n     Return stack back trace for current user-space task as string.\n\n\n\n## Synopsis\n\n\n    sprint_ubacktrace:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns a simple backtrace for the current task. One line per\n   address. Includes the symbol name (or hex address if symbol\n   couldn't be resolved) and module name (if found). Includes the\n   offset from the start of the function if found, otherwise the\n   offset will be added to the module (if found, between\n   brackets). Returns the backtrace as string (each line terminated by\n   a newline character).  Note that the returned stack will be\n   truncated to MAXSTRINGLEN, to print fuller and richer stacks use\n   print_ubacktrace. Equivalent to sprint_ustack(ubacktrace),\n   but more efficient (no need to translate between hex strings and\n   final backtrace string).\n\n\n\n## Note\nTo get (full) backtraces for user space applications and shared\n   shared libraries not mentioned in the current script run stap with\n   -d /path/to/exe-or-so and/or add --ldd to load all needed unwind data.\n\n\n\n" },
    { "name": "sprint_usyms", "doc": "## Name\nfunction::sprint_usyms — \n     Return stack for user addresses from string\n\n\n\n## Synopsis\n\n\n    sprint_usyms(callers:string)\n\n\n## Arguments\nString with list of hexadecimal (user) addresses\n\n\n\n## Description\nPerform a symbolic lookup of the addresses in the given string,\n   which are assumed to be the result of a prior calls to ustack,\n   ucallers, and similar functions.\n   \n\n   Returns a simple backtrace from the given hex string. One line per\n   address. Includes the symbol name (or hex address if symbol\n   couldn't be resolved) and module name (if found), as obtained from\n   usymdata. Includes the offset from the start of the function if\n   found, otherwise the offset will be added to the module (if found, between\n   brackets). Returns the backtrace as string (each line terminated by\n   a newline character).  Note that the returned stack will be\n   truncated to MAXSTRINGLEN, to print fuller and richer stacks use\n   print_usyms.\n\n\n\n" },
    { "name": "stack", "doc": "## Name\nfunction::stack — \n  Return address at given depth of kernel stack backtrace\n\n\n\n## Synopsis\n\n\n    stack:long(n:long)\n\n\n## Arguments\nnumber of levels to descend in the stack.\n\n\n\n## Description\nPerforms a simple (kernel) backtrace, and returns the\n   element at the specified position. The results of the backtrace itself\n   are cached, so that the backtrace computation is performed at most once\n   no matter how many times stack is called, or in what order.\n\n\n\n" },
    { "name": "stack_size", "doc": "## Name\nfunction::stack_size — \n     Return the size of the kernel stack\n\n\n\n## Synopsis\n\n\n    stack_size:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the size of the kernel stack.\n\n\n\n" },
    { "name": "stack_unused", "doc": "## Name\nfunction::stack_unused — \n     Returns the amount of kernel stack currently available\n\n\n\n## Synopsis\n\n\n    stack_unused:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function determines how many bytes are\n   currently available in the kernel stack.\n\n\n\n" },
    { "name": "stack_used", "doc": "## Name\nfunction::stack_used — \n     Returns the amount of kernel stack used\n\n\n\n## Synopsis\n\n\n    stack_used:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function determines how many bytes are\n   currently used in the kernel stack.\n\n\n\n" },
    { "name": "stp_pid", "doc": "## Name\nfunction::stp_pid — \n     The process id of the stapio process\n\n\n\n## Synopsis\n\n\n    stp_pid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the process id of the\n   stapio process that launched this script. There could be\n   other SystemTap scripts and stapio processes running on\n   the system.\n\n\n\n" },
    { "name": "symdata", "doc": "## Name\nfunction::symdata — \n     Return the kernel symbol and module offset for the address\n\n\n\n## Synopsis\n\n\n    symdata:string(addr:long)\n\n\n## Arguments\nThe address to translate\n\n\n\n## Description\nReturns the (function) symbol name associated with the\n   given address if known, the offset from the start and size of the\n   symbol, plus module name (between brackets). If symbol is unknown,\n   but module is known, the offset inside the module, plus the size of\n   the module is added.  If any element is not known it will be\n   omitted and if the symbol name is unknown it will return the hex\n   string for the given address.\n\n\n\n" },
    { "name": "symfile", "doc": "## Name\nfunction::symfile — \n     Return the file name of a given address.\n\n\n\n## Synopsis\n\n\n    symfile:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the file name of the  given address, if known. If the\n   file name cannot be found, the hex string representation of the address\n   will be returned.\n\n\n\n" },
    { "name": "symfileline", "doc": "## Name\nfunction::symfileline — \n     Return the file name and line number of an address.\n\n\n\n## Synopsis\n\n\n    symfileline:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the file name and the (approximate) line number of the\n   given address, if known. If the file name or the line number cannot be\n   found, the hex string representation of the address will be returned.\n\n\n\n" },
    { "name": "symline", "doc": "## Name\nfunction::symline — \n     Return the line number of an address.\n\n\n\n## Synopsis\n\n\n    symline:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the (approximate) line number of the given address, if\n   known. If the line number cannot be found, the hex string representation of\n   the address will be returned.\n\n\n\n" },
    { "name": "symname", "doc": "## Name\nfunction::symname — \n     Return the kernel symbol associated with the given address\n\n\n\n## Synopsis\n\n\n    symname:string(addr:long)\n\n\n## Arguments\nThe address to translate\n\n\n\n## Description\nReturns the (function) symbol name associated with the\n   given address if known. If not known it will return the hex string\n   representation of addr.\n\n\n\n" },
    { "name": "target", "doc": "## Name\nfunction::target — \n     Return the process ID of the target process\n\n\n\n## Synopsis\n\n\n    target:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the process ID of the target\n   process.  This is useful in conjunction with the -x PID or\n   -c CMD command-line options to stap. An example of its use is\n   to create scripts that filter on a specific process.\n   \n\n   -x <pid>\n   target returns the pid specified by -x\n   \n\n   -c <command>\n   target returns the pid for the executed command specified by -c\n\n\n\n" },
    { "name": "task_ancestry", "doc": "## Name\nfunction::task_ancestry — \n  The ancestry of the given task\n\n\n\n## Synopsis\n\n\n    task_ancestry:string(task:long,with_time:long)\n\n\n## Arguments\ntask_struct pointer\n    \n     set to 1 to also print the start time of processes (given as a\n     delta from boot time)\n\n\n\n## Description\nReturn the ancestry of the given task in the form of\n   “grandparent_process=>parent_process=>process”.\n\n\n\n" },
    { "name": "task_backtrace", "doc": "## Name\nfunction::task_backtrace — \n     Hex backtrace of an arbitrary task\n\n\n\n## Synopsis\n\n\n    task_backtrace:string(task:long)\n\n\n## Arguments\npointer to task_struct\n\n\n\n## Description\nThis function returns a string of hex addresses\n   that are a backtrace of the stack of a particular task\n   Output may be truncated as per maximum string length.\n   Deprecated in SystemTap 1.6.\n\n\n\n" },
    { "name": "task_cpu", "doc": "## Name\nfunction::task_cpu — \n     The scheduled cpu of the task\n\n\n\n## Synopsis\n\n\n    task_cpu:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the scheduled cpu for the given task.\n\n\n\n" },
    { "name": "task_current", "doc": "## Name\nfunction::task_current — \n  The current task_struct of the current task\n\n\n\n## Synopsis\n\n\n    task_current:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the task_struct representing the current process.\n   This address can be passed to the various task_*() functions to extract\n   more task-specific data.\n\n\n\n" },
    { "name": "task_cwd_path", "doc": "## Name\nfunction::task_cwd_path — \n     get the path struct pointer for a task's current working directory\n\n\n\n## Synopsis\n\n\n    task_cwd_path:long(task:long)\n\n\n## Arguments\ntask_struct pointer.\n\n\n\n" },
    { "name": "task_egid", "doc": "## Name\nfunction::task_egid — \n     The effective group identifier of the task\n\n\n\n## Synopsis\n\n\n    task_egid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the effective group id of the given task.\n\n\n\n" },
    { "name": "task_euid", "doc": "## Name\nfunction::task_euid — \n     The effective user identifier of the task\n\n\n\n## Synopsis\n\n\n    task_euid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the effective user id of the given task.\n\n\n\n" },
    { "name": "task_exe_file", "doc": "## Name\nfunction::task_exe_file — \n     get the file struct pointer for a task's executable file\n\n\n\n## Synopsis\n\n\n    task_exe_file:long(task:long)\n\n\n## Arguments\ntask_struct pointer.\n\n\n\n" },
    { "name": "task_fd_lookup", "doc": "## Name\nfunction::task_fd_lookup — \n     get the file struct for a task's fd\n\n\n\n## Synopsis\n\n\n    task_fd_lookup:long(task:long,fd:long)\n\n\n## Arguments\ntask_struct pointer.\n    \n     file descriptor number.\n\n\n\n## Description\nReturns the file struct pointer for a task's file\n   descriptor.\n\n\n\n" },
    { "name": "sprint_ustack", "doc": "## Name\nfunction::sprint_ustack — \n     Return stack for the current task from string.\n\n\n\n## Synopsis\n\n\n    sprint_ustack:string(stk:string)\n\n\n## Arguments\nString with list of hexadecimal addresses for the current task.\n\n\n\n## Description\nPerform a symbolic lookup of the addresses in the given string,\n   which is assumed to be the result of a prior call to\n   ubacktrace for the current task.\n   \n\n   Returns a simple backtrace from the given hex string. One line per\n   address. Includes the symbol name (or hex address if symbol\n   couldn't be resolved) and module name (if found). Includes the\n   offset from the start of the function if found, otherwise the\n   offset will be added to the module (if found, between\n   brackets). Returns the backtrace as string (each line terminated by\n   a newline character).  Note that the returned stack will be\n   truncated to MAXSTRINGLEN, to print fuller and richer stacks use\n   print_ustack.\n\n\n\n## NOTE\nit is recommended to use sprint_usyms instead of this function.\n\n\n\n" },
    { "name": "task_gid", "doc": "## Name\nfunction::task_gid — \n     The group identifier of the task\n\n\n\n## Synopsis\n\n\n    task_gid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the group id of the given task.\n\n\n\n" },
    { "name": "task_max_file_handles", "doc": "## Name\nfunction::task_max_file_handles — \n     The max number of open files for the task\n\n\n\n## Synopsis\n\n\n    task_max_file_handles:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the maximum number of file handlers for the given task.\n\n\n\n" },
    { "name": "task_nice", "doc": "## Name\nfunction::task_nice — \n     The nice value of the task\n\n\n\n## Synopsis\n\n\n    task_nice:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the nice value of the given task.\n\n\n\n" },
    { "name": "task_ns_egid", "doc": "## Name\nfunction::task_ns_egid — \n     The effective group identifier of the task\n\n\n\n## Synopsis\n\n\n    task_ns_egid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the effective group id of the given task.\n\n\n\n" },
    { "name": "task_ns_euid", "doc": "## Name\nfunction::task_ns_euid — \n     The effective user identifier of the task\n\n\n\n## Synopsis\n\n\n    task_ns_euid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the effective user id of the given task.\n\n\n\n" },
    { "name": "task_ns_gid", "doc": "## Name\nfunction::task_ns_gid — \n     The group identifier of the task as seen in a namespace\n\n\n\n## Synopsis\n\n\n    task_ns_gid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the group id of the given task as seen in\n   in the given user namespace.\n\n\n\n" },
    { "name": "task_ns_pid", "doc": "## Name\nfunction::task_ns_pid — \n     The process identifier of the task\n\n\n\n## Synopsis\n\n\n    task_ns_pid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis fucntion returns the process id of the given task based on\n   the specified pid namespace..\n\n\n\n" },
    { "name": "task_ns_tid", "doc": "## Name\nfunction::task_ns_tid — \n     The thread identifier of the task as seen in a namespace\n\n\n\n## Synopsis\n\n\n    task_ns_tid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the thread id of the given task as seen \n   in the pid namespace.\n\n\n\n" },
    { "name": "task_ns_uid", "doc": "## Name\nfunction::task_ns_uid — \n     The user identifier of the task\n\n\n\n## Synopsis\n\n\n    task_ns_uid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the user id of the given task.\n\n\n\n" },
    { "name": "task_open_file_handles", "doc": "## Name\nfunction::task_open_file_handles — \n     The number of open files of the task\n\n\n\n## Synopsis\n\n\n    task_open_file_handles:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the number of open file handlers for the given task.\n\n\n\n" },
    { "name": "task_parent", "doc": "## Name\nfunction::task_parent — \n     The task_struct of the parent task\n\n\n\n## Synopsis\n\n\n    task_parent:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the parent task_struct of\n   the given task. This address can be passed to the various \n   task_*() functions to extract more task-specific data.\n\n\n\n" },
    { "name": "task_pid", "doc": "## Name\nfunction::task_pid — \n     The process identifier of the task\n\n\n\n## Synopsis\n\n\n    task_pid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis fucntion returns the process id of the given task.\n\n\n\n" },
    { "name": "task_execname", "doc": "## Name\nfunction::task_execname — \n     The name of the task\n\n\n\n## Synopsis\n\n\n    task_execname:string(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nReturn the name of the given task.\n\n\n\n" },
    { "name": "task_prio", "doc": "## Name\nfunction::task_prio — \n     The priority value of the task\n\n\n\n## Synopsis\n\n\n    task_prio:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the priority value of the given task.\n\n\n\n" },
    { "name": "task_state", "doc": "## Name\nfunction::task_state — \n     The state of the task\n\n\n\n## Synopsis\n\n\n    task_state:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nReturn the state of the given task, one of:\n   TASK_RUNNING (0), TASK_INTERRUPTIBLE (1), TASK_UNINTERRUPTIBLE (2),\n   TASK_STOPPED (4), TASK_TRACED (8), EXIT_ZOMBIE (16), or EXIT_DEAD (32).\n\n\n\n" },
    { "name": "task_tid", "doc": "## Name\nfunction::task_tid — \n     The thread identifier of the task\n\n\n\n## Synopsis\n\n\n    task_tid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the thread id of the given task.\n\n\n\n" },
    { "name": "task_uid", "doc": "## Name\nfunction::task_uid — \n     The user identifier of the task\n\n\n\n## Synopsis\n\n\n    task_uid:long(task:long)\n\n\n## Arguments\ntask_struct pointer\n\n\n\n## Description\nThis function returns the user id of the given task.\n\n\n\n" },
    { "name": "u32_arg", "doc": "## Name\nfunction::u32_arg — \n     Return function argument as unsigned 32-bit value\n\n\n\n## Synopsis\n\n\n    u32_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the unsigned 32-bit value of argument n,\n   same as uint_arg.\n\n\n\n" },
    { "name": "tid", "doc": "## Name\nfunction::tid — \n     Returns the thread ID of a target process\n\n\n\n## Synopsis\n\n\n    tid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the thread ID of the target process.\n\n\n\n" },
    { "name": "u64_arg", "doc": "## Name\nfunction::u64_arg — \n     Return function argument as unsigned 64-bit value\n\n\n\n## Synopsis\n\n\n    u64_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the unsigned 64-bit value of argument n,\n   same as ulonglong_arg.\n\n\n\n" },
    { "name": "print_usyms", "doc": "## Name\nfunction::print_usyms — \n     Print out user stack from string\n\n\n\n## Synopsis\n\n\n    print_usyms(callers:string)\n\n\n## Arguments\nString with list of hexadecimal (user) addresses\n\n\n\n## Description\nThis function performs a symbolic lookup of the addresses\n   in the given string,\n   which are assumed to be the result of prior calls to ustack,\n   ucallers, and similar functions.\n   \n\n   Prints one line per address, including the address, the\n   name of the function containing the address, and an estimate of\n   its position within that function, as obtained by usymdata.\n   Returns nothing.\n\n\n\n" },
    { "name": "u_register", "doc": "## Name\nfunction::u_register — \n     Return the unsigned value of the named CPU register\n\n\n\n## Synopsis\n\n\n    u_register:long(name:string)\n\n\n## Arguments\nName of the register to return\n\n\n\n## Description\nSame as register(name), except that if the register\n   is 32 bits wide, it is zero-extended to 64 bits.\n\n\n\n" },
    { "name": "ubacktrace", "doc": "## Name\nfunction::ubacktrace — \n     Hex backtrace of current user-space task stack.\n\n\n\n## Synopsis\n\n\n    ubacktrace:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturn a string of hex addresses that are a backtrace of the \n   stack of the current task.  Output may be truncated as per maximum\n   string length. Returns empty string when current probe point cannot\n   determine user backtrace.  See backtrace for kernel traceback.\n\n\n\n## Note\nTo get (full) backtraces for user space applications and shared\n   shared libraries not mentioned in the current script run stap with\n   -d /path/to/exe-or-so and/or add --ldd to load all needed unwind data.\n\n\n\n" },
    { "name": "uid", "doc": "## Name\nfunction::uid — \n     Returns the user ID of a target process\n\n\n\n## Synopsis\n\n\n    uid:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the user ID of the target process.\n\n\n\n" },
    { "name": "uint_arg", "doc": "## Name\nfunction::uint_arg — \n     Return function argument as unsigned int\n\n\n\n## Synopsis\n\n\n    uint_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the value of argument n as an unsigned int\n   (i.e., a 32-bit integer zero-extended to 64 bits).\n\n\n\n" },
    { "name": "ulong_arg", "doc": "## Name\nfunction::ulong_arg — \n     Return function argument as unsigned long\n\n\n\n## Synopsis\n\n\n    ulong_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the value of argument n as an unsigned long.\n   On architectures where a long is 32 bits, the value is zero-extended\n   to 64 bits.\n\n\n\n" },
    { "name": "ulonglong_arg", "doc": "## Name\nfunction::ulonglong_arg — \n     Return function argument as 64-bit value\n\n\n\n## Synopsis\n\n\n    ulonglong_arg:long(n:long)\n\n\n## Arguments\nindex of argument to return\n\n\n\n## Description\nReturn the value of argument n as a 64-bit value.\n   (Same as longlong_arg.)\n\n\n\n" },
    { "name": "umodname", "doc": "## Name\nfunction::umodname — \n  Returns the (short) name of the user module.\n\n\n\n## Synopsis\n\n\n    umodname:string(addr:long)\n\n\n## Arguments\nUser-space address\n\n\n\n## Description\nReturns the short name of the user space module for the current task that\n   that the given address is part of. Reports an error when the address\n   isn't in a (mapped in) module, or the module cannot be found for some reason.\n\n\n\n" },
    { "name": "uaddr", "doc": "## Name\nfunction::uaddr — \n     User space address of current running task\n\n\n\n## Synopsis\n\n\n    uaddr:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns the address in userspace that the current\n   task was at when the probe occurred. When the current running task\n   isn't a user space thread, or the address cannot be found, zero\n   is returned. Can be used to see where the current task is combined\n   with usymname or usymdata. Often the task will be in the VDSO\n   where it entered the kernel.\n\n\n\n" },
    { "name": "usymfile", "doc": "## Name\nfunction::usymfile — \n     Return the file name of a given address.\n\n\n\n## Synopsis\n\n\n    usymfile:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the file name of the  given address, if known. If the\n   file name cannot be found, the hex string representation of the address\n   will be returned.\n\n\n\n" },
    { "name": "user_mode", "doc": "## Name\nfunction::user_mode — \n     Determines if probe point occurs in user-mode\n\n\n\n## Synopsis\n\n\n    user_mode:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturn 1 if the probe point occurred in user-mode.\n\n\n\n" },
    { "name": "usymdata", "doc": "## Name\nfunction::usymdata — \n     Return the symbol and module offset of an address.\n\n\n\n## Synopsis\n\n\n    usymdata:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the (function) symbol name associated with the\n   given address in the current task if known, the offset from the\n   start and the size of the symbol, plus the module name (between\n   brackets).  If symbol is unknown, but module is known, the offset\n   inside the module, plus the size of the module is added.  If any\n   element is not known it will be omitted and if the symbol name is\n   unknown it will return the hex string for the given address.\n\n\n\n" },
    { "name": "usymfileline", "doc": "## Name\nfunction::usymfileline — \n     Return the file name and line number of an address.\n\n\n\n## Synopsis\n\n\n    usymfileline:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the file name and the (approximate) line number of the\n   given address, if known. If the file name or the line number cannot be\n   found, the hex string representation of the address will be returned.\n\n\n\n" },
    { "name": "usymline", "doc": "## Name\nfunction::usymline — \n     Return the line number of an address.\n\n\n\n## Synopsis\n\n\n    usymline:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the (approximate) line number of the given address, if\n   known. If the line number cannot be found, the hex string representation of\n   the address will be returned.\n\n\n\n" },
    { "name": "ustack", "doc": "## Name\nfunction::ustack — \n  Return address at given depth of user stack backtrace\n\n\n\n## Synopsis\n\n\n    ustack:long(n:long)\n\n\n## Arguments\nnumber of levels to descend in the stack.\n\n\n\n## Description\nPerforms a simple (user space) backtrace, and returns the\n   element at the specified position. The results of the backtrace itself\n   are cached, so that the backtrace computation is performed at most once\n   no matter how many times ustack is called, or in what order.\n\n\n\n" },
    { "name": "ucallers", "doc": "## Name\nfunction::ucallers — \n     Return first n elements of user stack backtrace\n\n\n\n## Synopsis\n\n\n    ucallers:string(n:long)\n\n\n## Arguments\nnumber of levels to descend in the stack (not counting the top\n     level). If n is -1, print the entire stack.\n\n\n\n## Description\nThis function returns a string of the first n hex\n   addresses from the backtrace of the user stack. Output may be\n   truncated as per maximum string length (MAXSTRINGLEN).\n\n\n\n## Note\nTo get (full) backtraces for user space applications and shared\n   shared libraries not mentioned in the current script run stap with\n   -d /path/to/exe-or-so and/or add --ldd to load all needed unwind data.\n\n\n\n" },
    { "name": "usymname", "doc": "## Name\nfunction::usymname — \n     Return the symbol of an address in the current task.\n\n\n\n## Synopsis\n\n\n    usymname:string(addr:long)\n\n\n## Arguments\nThe address to translate.\n\n\n\n## Description\nReturns the (function) symbol name associated with the\n   given address if known. If not known it will return the hex string\n   representation of addr.\n\n\n\n" },
    { "name": "HZ", "doc": "## Name\nfunction::HZ — \n     Kernel HZ\n\n\n\n## Synopsis\n\n\n    HZ:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the value of the kernel HZ macro,\n   which corresponds to the rate of increase of the jiffies value.\n\n\n\n" },
    { "name": "cpu_clock_ns", "doc": "## Name\nfunction::cpu_clock_ns — \n  Number of nanoseconds on the given cpu's clock\n\n\n\n## Synopsis\n\n\n    cpu_clock_ns:long(cpu:long)\n\n\n## Arguments\nWhich processor's clock to read\n\n\n\n## Description\nThis function returns the number of nanoseconds on the given\n   cpu's clock.  This is always monotonic comparing on the same cpu, but may\n   have some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "cpu_clock_ms", "doc": "## Name\nfunction::cpu_clock_ms — \n     Number of milliseconds on the given cpu's clock\n\n\n\n## Synopsis\n\n\n    cpu_clock_ms:long(cpu:long)\n\n\n## Arguments\nWhich processor's clock to read\n\n\n\n## Description\nThis function returns the number of milliseconds on the given\n   cpu's clock.  This is always monotonic comparing on the same cpu, but may\n   have some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "cpu_clock_s", "doc": "## Name\nfunction::cpu_clock_s — \n     Number of seconds on the given cpu's clock\n\n\n\n## Synopsis\n\n\n    cpu_clock_s:long(cpu:long)\n\n\n## Arguments\nWhich processor's clock to read\n\n\n\n## Description\nThis function returns the number of seconds on the given cpu's\n   clock.  This is always monotonic comparing on the same cpu, but may have\n   some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "cpu_clock_us", "doc": "## Name\nfunction::cpu_clock_us — \n     Number of microseconds on the given cpu's clock\n\n\n\n## Synopsis\n\n\n    cpu_clock_us:long(cpu:long)\n\n\n## Arguments\nWhich processor's clock to read\n\n\n\n## Description\nThis function returns the number of microseconds on the given\n   cpu's clock.  This is always monotonic comparing on the same cpu, but may\n   have some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "delete_stopwatch", "doc": "## Name\nfunction::delete_stopwatch — \n  Remove an existing stopwatch\n\n\n\n## Synopsis\n\n\n    delete_stopwatch(name:string)\n\n\n## Arguments\nthe stopwatch name\n\n\n\n## Description\nRemove stopwatch name.\n\n\n\n" },
    { "name": "get_cycles", "doc": "## Name\nfunction::get_cycles — \n  Processor cycle count\n\n\n\n## Synopsis\n\n\n    get_cycles:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the processor cycle counter value\n   if available, else it returns zero. The cycle counter is free running\n   and unsynchronized on each processor. Thus, the order of events cannot\n   determined by comparing the results of the get_cycles function on \n   different processors.\n\n\n\n" },
    { "name": "gettimeofday_ms", "doc": "## Name\nfunction::gettimeofday_ms — \n     Number of milliseconds since UNIX epoch\n\n\n\n## Synopsis\n\n\n    gettimeofday_ms:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of milliseconds\n   since the UNIX epoch.\n\n\n\n" },
    { "name": "gettimeofday_us", "doc": "## Name\nfunction::gettimeofday_us — \n     Number of microseconds since UNIX epoch\n\n\n\n## Synopsis\n\n\n    gettimeofday_us:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of microseconds\n   since the UNIX epoch.\n\n\n\n" },
    { "name": "gettimeofday_ns", "doc": "## Name\nfunction::gettimeofday_ns — \n  Number of nanoseconds since UNIX epoch\n\n\n\n## Synopsis\n\n\n    gettimeofday_ns:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of nanoseconds\n   since the UNIX epoch.\n\n\n\n" },
    { "name": "jiffies", "doc": "## Name\nfunction::jiffies — \n     Kernel jiffies count\n\n\n\n## Synopsis\n\n\n    jiffies:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the value of the kernel jiffies\n   variable.  This value is incremented periodically by timer interrupts,\n   and may wrap around a 32-bit or 64-bit boundary.  See HZ.\n\n\n\n" },
    { "name": "local_clock_ms", "doc": "## Name\nfunction::local_clock_ms — \n     Number of milliseconds on the local cpu's clock\n\n\n\n## Synopsis\n\n\n    local_clock_ms:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of milliseconds on the local\n   cpu's clock.  This is always monotonic comparing on the same cpu, but may\n   have some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "ktime_get_ns", "doc": "## Name\nfunction::ktime_get_ns — \n     Number of nanoseconds since boot\n\n\n\n## Synopsis\n\n\n    ktime_get_ns:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the system ktime.\n\n\n\n" },
    { "name": "gettimeofday_s", "doc": "## Name\nfunction::gettimeofday_s — \n     Number of seconds since UNIX epoch\n\n\n\n## Synopsis\n\n\n    gettimeofday_s:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of seconds since\n   the UNIX epoch.\n\n\n\n" },
    { "name": "local_clock_us", "doc": "## Name\nfunction::local_clock_us — \n     Number of microseconds on the local cpu's clock\n\n\n\n## Synopsis\n\n\n    local_clock_us:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of microseconds on the local\n   cpu's clock.  This is always monotonic comparing on the same cpu, but may\n   have some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "read_stopwatch_ms", "doc": "## Name\nfunction::read_stopwatch_ms — \n     Reads the time in milliseconds for a stopwatch\n\n\n\n## Synopsis\n\n\n    read_stopwatch_ms:long(name:string)\n\n\n## Arguments\nstopwatch name\n\n\n\n## Description\nReturns time in milliseconds for stopwatch name.\n   Creates stopwatch name if it does not currently exist.\n\n\n\n" },
    { "name": "read_stopwatch_ns", "doc": "## Name\nfunction::read_stopwatch_ns — \n     Reads the time in nanoseconds for a stopwatch\n\n\n\n## Synopsis\n\n\n    read_stopwatch_ns:long(name:string)\n\n\n## Arguments\nstopwatch name\n\n\n\n## Description\nReturns time in nanoseconds for stopwatch name.\n   Creates stopwatch name if it does not currently exist.\n\n\n\n" },
    { "name": "read_stopwatch_s", "doc": "## Name\nfunction::read_stopwatch_s — \n     Reads the time in seconds for a stopwatch\n\n\n\n## Synopsis\n\n\n    read_stopwatch_s:long(name:string)\n\n\n## Arguments\nstopwatch name\n\n\n\n## Description\nReturns time in seconds for stopwatch name.\n   Creates stopwatch name if it does not currently exist.\n\n\n\n" },
    { "name": "read_stopwatch_us", "doc": "## Name\nfunction::read_stopwatch_us — \n     Reads the time in microseconds for a stopwatch\n\n\n\n## Synopsis\n\n\n    read_stopwatch_us:long(name:string)\n\n\n## Arguments\nstopwatch name\n\n\n\n## Description\nReturns time in microseconds for stopwatch name.\n   Creates stopwatch name if it does not currently exist.\n\n\n\n" },
    { "name": "start_stopwatch", "doc": "## Name\nfunction::start_stopwatch — \n     Start a stopwatch\n\n\n\n## Synopsis\n\n\n    start_stopwatch(name:string)\n\n\n## Arguments\nthe stopwatch name\n\n\n\n## Description\nStart stopwatch name.\n   Creates stopwatch name if it does not currently exist.\n\n\n\n" },
    { "name": "stop_stopwatch", "doc": "## Name\nfunction::stop_stopwatch — \n     Stop a stopwatch\n\n\n\n## Synopsis\n\n\n    stop_stopwatch(name:string)\n\n\n## Arguments\nthe stopwatch name\n\n\n\n## Description\nStop stopwatch name.\n   Creates stopwatch name if it does not currently exist.\n\n\n\n" },
    { "name": "ctime", "doc": "## Name\nfunction::ctime — \n  Convert seconds since epoch into human readable date/time string\n\n\n\n## Synopsis\n\n\n1) ctime:string(epochsecs:long)2) ctime:string()\n\n## Arguments\nNumber of seconds since epoch (as returned by gettimeofday_s)\n\n\n\n## Description\n1) Takes an argument of seconds since the epoch as returned bygettimeofday_s. Returns a string of the form\n   2) “Wed Jun 30 21:49:08 1993”\n   \n\n   The string will always be exactly 24 characters. If the time would\n   be unreasonable far in the past (before what can be represented\n   with a 32 bit offset in seconds from the epoch) an error will occur\n   (which can be avoided with try/catch). If the time would be\n   unreasonable far in the future, an error will also occur.\n   \n\n   Note that the epoch (zero) corresponds to\n   \n\n   “Thu Jan  1 00:00:00 1970”\n   \n\n   The earliest full date given by ctime, corresponding to epochsecs\n   -2147483648 is “Fri Dec 13 20:45:52 1901”. The latest full date\n   given by ctime, corresponding to epochsecs 2147483647 is\n   “Tue Jan 19 03:14:07 2038”.\n   \n\n   The abbreviations for the days of the week are ‘Sun’, ‘Mon’, ‘Tue’,\n   ‘Wed’, ‘Thu’, ‘Fri’, and ‘Sat’.  The abbreviations for the months\n   are ‘Jan’, ‘Feb’, ‘Mar’, ‘Apr’, ‘May’, ‘Jun’, ‘Jul’, ‘Aug’, ‘Sep’,\n   ‘Oct’, ‘Nov’, and ‘Dec’.\n   \n\n   Note that the real C library ctime function puts a newline ('\\n')\n   character at the end of the string that this function does not.\n   Also note that since the kernel has no concept of timezones, the\n   returned time is always in GMT.\n\n\n\n" },
    { "name": "tz_ctime", "doc": "## Name\nfunction::tz_ctime — \n  Convert seconds since epoch into human readable date/time string, with local time zone\n\n\n\n## Synopsis\n\n\n    tz_ctime(epochsecs:)\n\n\n## Arguments\nnumber of seconds since epoch (as returned by gettimeofday_s)\n\n\n\n## Description\nTakes an argument of seconds since the epoch as returned by\n   gettimeofday_s.  Returns a string of the same form as ctime, but\n   offsets the epoch time for the local time zone, and appends the name of the\n   local time zone.  The string length may vary.  The time zone information is\n   passed by staprun at script startup only.\n\n\n\n" },
    { "name": "tz_name", "doc": "## Name\nfunction::tz_name — \n     Return local time zone name\n\n\n\n## Synopsis\n\n\n    tz_name()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns the local time zone name, as passed by staprun at\n   script startup only.\n\n\n\n" },
    { "name": "tz_gmtoff", "doc": "## Name\nfunction::tz_gmtoff — \n  Return local time zone offset\n\n\n\n## Synopsis\n\n\n    tz_gmtoff()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns the local time zone offset (seconds west of UTC), as\n   passed by staprun at script startup only.\n\n\n\n" },
    { "name": "system", "doc": "## Name\nfunction::system — \n  Issue a command to the system\n\n\n\n## Synopsis\n\n\n    system(cmd:string)\n\n\n## Arguments\nthe command to issue to the system\n\n\n\n## Description\nThis function runs a command on the system.  The\n   command is started in the background some time after the current\n   probe completes. The command is run with the same UID as the user\n   running the stap or staprun command.  The runtime may impose a\n   relatively short length limit on the command string.  Exceeding it\n   may print a warning.\n\n\n\n" },
    { "name": "addr_to_node", "doc": "## Name\nfunction::addr_to_node — \n     Returns which node a given address belongs to within a NUMA system\n\n\n\n## Synopsis\n\n\n    addr_to_node:long(addr:long)\n\n\n## Arguments\nthe address of the faulting memory access\n\n\n\n## Description\nThis function accepts an address, and returns the \n   node that the given address belongs to in a NUMA system.\n\n\n\n" },
    { "name": "mem_page_size", "doc": "## Name\nfunction::mem_page_size — \n     Number of bytes in a page for this architecture\n\n\n\n## Synopsis\n\n\n    mem_page_size:long()\n\n\n## Arguments\nNone\n\n\n\n" },
    { "name": "bytes_to_string", "doc": "## Name\nfunction::bytes_to_string — \n     Human readable string for given bytes\n\n\n\n## Synopsis\n\n\n    bytes_to_string:string(bytes:long)\n\n\n## Arguments\nNumber of bytes to translate.\n\n\n\n## Description\nReturns a string representing the number of bytes (up\n   to 1024 bytes), the number of kilobytes (when less than 1024K)\n   postfixed by 'K', the number of megabytes (when less than 1024M)\n   postfixed by 'M' or the number of gigabytes postfixed by 'G'. If\n   representing K, M or G, and the number is amount is less than 100,\n   it includes a '.' plus the remainer. The returned string will be 5\n   characters wide (padding with whitespace at the front) unless\n   negative or representing more than 9999G bytes.\n\n\n\n" },
    { "name": "pages_to_string", "doc": "## Name\nfunction::pages_to_string — \n     Turns pages into a human readable string\n\n\n\n## Synopsis\n\n\n    pages_to_string:string(pages:long)\n\n\n## Arguments\nNumber of pages to translate.\n\n\n\n## Description\nMultiplies pages by page_size to get the number of\n   bytes and returns the result of bytes_to_string.\n\n\n\n" },
    { "name": "proc_mem_data", "doc": "## Name\nfunction::proc_mem_data — \n     Program data size (data + stack) in pages\n\n\n\n## Synopsis\n\n\n1) proc_mem_data:long()2) proc_mem_data:long(pid:long)\n\n## Arguments\nThe pid of process to examine\n\n\n\n## Description\n1) Returns the current process data size (data + stack)\n   in pages, or zero when there is no current process or the number of\n   pages couldn't be retrieved.2) Returns the given process data size (data + stack)\n   in pages, or zero when the process doesn't exist or the number of\n   pages couldn't be retrieved.\n\n\n\n" },
    { "name": "proc_mem_rss", "doc": "## Name\nfunction::proc_mem_rss — \n     Program resident set size in pages\n\n\n\n## Synopsis\n\n\n1) proc_mem_rss:long()2) proc_mem_rss:long(pid:long)\n\n## Arguments\nThe pid of process to examine\n\n\n\n## Description\n1) Returns the resident set size in pages of the current\n   process, or zero when there is no current process or the number of\n   pages couldn't be retrieved.2) Returns the resident set size in pages of the given\n   process, or zero when the process doesn't exist or the number of\n   pages couldn't be retrieved.\n\n\n\n" },
    { "name": "proc_mem_shr", "doc": "## Name\nfunction::proc_mem_shr — \n     Program shared pages (from shared mappings)\n\n\n\n## Synopsis\n\n\n1) proc_mem_shr:long()2) proc_mem_shr:long(pid:long)\n\n## Arguments\nThe pid of process to examine\n\n\n\n## Description\n1) Returns the shared pages (from shared mappings) of the\n   current process, or zero when there is no current process or the\n   number of pages couldn't be retrieved.2) Returns the shared pages (from shared mappings) of the\n   given process, or zero when the process doesn't exist or the\n   number of pages couldn't be retrieved.\n\n\n\n" },
    { "name": "proc_mem_size", "doc": "## Name\nfunction::proc_mem_size — \n  Total program virtual memory size in pages\n\n\n\n## Synopsis\n\n\n1) proc_mem_size:long()2) proc_mem_size:long(pid:long)\n\n## Arguments\nThe pid of process to examine\n\n\n\n## Description\n1) Returns the total virtual memory size in pages of the\n   current process, or zero when there is no current process or the\n   number of pages couldn't be retrieved.2) Returns the total virtual memory size in pages of the\n   given process, or zero when that process doesn't exist or the\n   number of pages couldn't be retrieved.\n\n\n\n" },
    { "name": "proc_mem_string", "doc": "## Name\nfunction::proc_mem_string — \n     Human readable string of process memory usage\n\n\n\n## Synopsis\n\n\n1) proc_mem_string:string()2) proc_mem_string:string(pid:long)\n\n## Arguments\nThe pid of process to examine\n\n\n\n## Description\n1) Returns a human readable string showing the size, rss,\n   shr, txt and data of the memory used by the current process.\n   For example“size: 301m, rss: 11m, shr: 8m, txt: 52k, data: 2248k”.\n2) Returns a human readable string showing the size, rss,\n   shr, txt and data of the memory used by the given process.\n   For example“size: 301m, rss: 11m, shr: 8m, txt: 52k, data: 2248k”.\n\n\n\n" },
    { "name": "proc_mem_txt", "doc": "## Name\nfunction::proc_mem_txt — \n     Program text (code) size in pages\n\n\n\n## Synopsis\n\n\n1) proc_mem_txt:long()2) proc_mem_txt:long(pid:long)\n\n## Arguments\nThe pid of process to examine\n\n\n\n## Description\n1) Returns the current process text (code) size in pages,\n   or zero when there is no current process or the number of pages\n   couldn't be retrieved.2) Returns the given process text (code) size in pages,\n   or zero when the process doesn't exist or the number of pages\n   couldn't be retrieved.\n\n\n\n" },
    { "name": "vm_fault_contains", "doc": "## Name\nfunction::vm_fault_contains — \n  Test return value for page fault reason\n\n\n\n## Synopsis\n\n\n    vm_fault_contains:long(value:long,test:long)\n\n\n## Arguments\nthe fault_type returned by vm.page_fault.return\n    \n     the type of fault to test for (VM_FAULT_OOM or similar)\n\n\n\n" },
    { "name": "local_clock_s", "doc": "## Name\nfunction::local_clock_s — \n     Number of seconds on the local cpu's clock\n\n\n\n## Synopsis\n\n\n    local_clock_s:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of seconds on the local cpu's\n   clock.  This is always monotonic comparing on the same cpu, but may have\n   some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "local_clock_ns", "doc": "## Name\nfunction::local_clock_ns — \n     Number of nanoseconds on the local cpu's clock\n\n\n\n## Synopsis\n\n\n    local_clock_ns:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function returns the number of nanoseconds on the local\n   cpu's clock.  This is always monotonic comparing on the same cpu, but may\n   have some drift between cpus (within about a jiffy).\n\n\n\n" },
    { "name": "cputime_to_usecs", "doc": "## Name\nfunction::cputime_to_usecs — \n     Translates the given cputime into microseconds\n\n\n\n## Synopsis\n\n\n    cputime_to_usecs:long(cputime:long)\n\n\n## Arguments\nTime to convert to microseconds.\n\n\n\n" },
    { "name": "cputime_to_string", "doc": "## Name\nfunction::cputime_to_string — \n     Human readable string for given cputime\n\n\n\n## Synopsis\n\n\n    cputime_to_string:string(cputime:long)\n\n\n## Arguments\nTime to translate.\n\n\n\n## Description\nEquivalent to calling:\n   msec_to_string (cputime_to_msecs (cputime).\n\n\n\n" },
    { "name": "cputime_to_msecs", "doc": "## Name\nfunction::cputime_to_msecs — \n     Translates the given cputime into milliseconds\n\n\n\n## Synopsis\n\n\n    cputime_to_msecs:long(cputime:long)\n\n\n## Arguments\nTime to convert to milliseconds.\n\n\n\n" },
    { "name": "msecs_to_string", "doc": "## Name\nfunction::msecs_to_string — \n     Human readable string for given milliseconds\n\n\n\n## Synopsis\n\n\n    msecs_to_string:string(msecs:long)\n\n\n## Arguments\nNumber of milliseconds to translate.\n\n\n\n## Description\nReturns a string representing the number of\n   milliseconds as a human readable string consisting of “XmY.ZZZs”,\n   where X is the number of minutes, Y is the number of seconds and\n   ZZZ is the number of milliseconds.\n\n\n\n" },
    { "name": "task_time_string", "doc": "## Name\nfunction::task_time_string — \n     Human readable string of task time usage\n\n\n\n## Synopsis\n\n\n    task_time_string:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns a human readable string showing the user and\n   system time the current task has used up to now.  For example\n   “usr: 0m12.908s, sys: 1m6.851s”.\n\n\n\n" },
    { "name": "task_start_time", "doc": "## Name\nfunction::task_start_time — \n     Start time of the given task\n\n\n\n## Synopsis\n\n\n    task_start_time:long(tid:long)\n\n\n## Arguments\nThread id of the given task\n\n\n\n## Description\nReturns the start time of the given task in nanoseconds since\n   boot time or 0 if the task does not exist.\n\n\n\n" },
    { "name": "task_time_string_tid", "doc": "## Name\nfunction::task_time_string_tid — \n     Human readable string of task time usage\n\n\n\n## Synopsis\n\n\n    task_time_string_tid:string(tid:long)\n\n\n## Arguments\nThread id of the given task\n\n\n\n## Description\nReturns a human readable string showing the user and\n   system time the given task has used up to now.  For example\n   “usr: 0m12.908s, sys: 1m6.851s”.\n\n\n\n" },
    { "name": "nsecs_to_string", "doc": "## Name\nfunction::nsecs_to_string — \n     Human readable string for given nanoseconds\n\n\n\n## Synopsis\n\n\n    nsecs_to_string:string(nsecs:long)\n\n\n## Arguments\nNumber of nanoseconds to translate.\n\n\n\n## Description\nReturns a string representing the number of\n   nanoseconds as a human readable string consisting of “XmY.ZZZZZZs”,\n   where X is the number of minutes, Y is the number of seconds and\n   ZZZZZZZZZ is the number of nanoseconds.\n\n\n\n" },
    { "name": "task_utime", "doc": "## Name\nfunction::task_utime — \n  User time of the task\n\n\n\n## Synopsis\n\n\n1) task_utime:long()2) task_utime:long(tid:long)\n\n## Arguments\nThread id of the given task\n\n\n\n## Description\n1) Returns the user time of the current task in cputime.\n   Does not include any time used by other tasks in this process, nor\n   does it include any time of the children of this task.2) Returns the user time of the given task in cputime,\n   or zero if the task doesn't exist.\n   Does not include any time used by other tasks in this process, nor\n   does it include any time of the children of this task.\n\n\n\n" },
    { "name": "usecs_to_string", "doc": "## Name\nfunction::usecs_to_string — \n     Human readable string for given microseconds\n\n\n\n## Synopsis\n\n\n    usecs_to_string:string(usecs:long)\n\n\n## Arguments\nNumber of microseconds to translate.\n\n\n\n## Description\nReturns a string representing the number of\n   microseconds as a human readable string consisting of “XmY.ZZZZZZs”,\n   where X is the number of minutes, Y is the number of seconds and\n   ZZZZZZ is the number of microseconds.\n\n\n\n" },
    { "name": "task_stime", "doc": "## Name\nfunction::task_stime — \n     System time of the task\n\n\n\n## Synopsis\n\n\n1) task_stime:long()2) task_stime:long(tid:long)\n\n## Arguments\nThread id of the given task\n\n\n\n## Description\n1) Returns the system time of the current task in cputime.\n   Does not include any time used by other tasks in this process, nor\n   does it include any time of the children of this task.2) Returns the system time of the given task in cputime,\n   or zero if the task doesn't exist.\n   Does not include any time used by other tasks in this process, nor\n   does it include any time of the children of this task.\n\n\n\n" },
    { "name": "format_ipaddr", "doc": "## Name\nfunction::format_ipaddr — \n  Returns a string representation for an IP address\n\n\n\n## Synopsis\n\n\n    format_ipaddr:string(addr:long,family:long)\n\n\n## Arguments\nthe IP address\n    \n     the IP address family (either AF_INET or AF_INET6)\n\n\n\n" },
    { "name": "htonl", "doc": "## Name\nfunction::htonl — \n     Convert 32-bit long from host to network order\n\n\n\n## Synopsis\n\n\n    htonl:long(x:long)\n\n\n## Arguments\nValue to convert\n\n\n\n" },
    { "name": "htonll", "doc": "## Name\nfunction::htonll — \n  Convert 64-bit long long from host to network order\n\n\n\n## Synopsis\n\n\n    htonll:long(x:long)\n\n\n## Arguments\nValue to convert\n\n\n\n" },
    { "name": "htons", "doc": "## Name\nfunction::htons — \n     Convert 16-bit short from host to network order\n\n\n\n## Synopsis\n\n\n    htons:long(x:long)\n\n\n## Arguments\nValue to convert\n\n\n\n" },
    { "name": "ntohl", "doc": "## Name\nfunction::ntohl — \n     Convert 32-bit long from network to host order\n\n\n\n## Synopsis\n\n\n    ntohl:long(x:long)\n\n\n## Arguments\nValue to convert\n\n\n\n" },
    { "name": "ip_ntop", "doc": "## Name\nfunction::ip_ntop — \n     Returns a string representation for an IPv4 address\n\n\n\n## Synopsis\n\n\n    ip_ntop:string(addr:long)\n\n\n## Arguments\nthe IPv4 address represented as an integer\n\n\n\n" },
    { "name": "ntohs", "doc": "## Name\nfunction::ntohs — \n     Convert 16-bit short from network to host order\n\n\n\n## Synopsis\n\n\n    ntohs:long(x:long)\n\n\n## Arguments\nValue to convert\n\n\n\n" },
    { "name": "ntohll", "doc": "## Name\nfunction::ntohll — \n     Convert 64-bit long long from network to host order\n\n\n\n## Synopsis\n\n\n    ntohll:long(x:long)\n\n\n## Arguments\nValue to convert\n\n\n\n" },
    { "name": "inet_get_ip_source", "doc": "## Name\nfunction::inet_get_ip_source — \n     Provide IP source address string for a kernel socket\n\n\n\n## Synopsis\n\n\n    inet_get_ip_source:string(sock:long)\n\n\n## Arguments\npointer to the kernel socket\n\n\n\n" },
    { "name": "sock_fam_num2str", "doc": "## Name\nfunction::sock_fam_num2str — \n     Given a protocol family number, return a string representation\n\n\n\n## Synopsis\n\n\n    sock_fam_num2str:string(family:long)\n\n\n## Arguments\nThe family number\n\n\n\n" },
    { "name": "sock_fam_str2num", "doc": "## Name\nfunction::sock_fam_str2num — \n     Given a protocol family name (string), return the corresponding protocol family number\n\n\n\n## Synopsis\n\n\n    sock_fam_str2num:long(family:string)\n\n\n## Arguments\nThe family name\n\n\n\n" },
    { "name": "sock_prot_str2num", "doc": "## Name\nfunction::sock_prot_str2num — \n     Given a protocol name (string), return the corresponding protocol number\n\n\n\n## Synopsis\n\n\n    sock_prot_str2num:long(proto:string)\n\n\n## Arguments\nThe protocol name\n\n\n\n" },
    { "name": "sock_state_num2str", "doc": "## Name\nfunction::sock_state_num2str — \n     Given a socket state number, return a string representation\n\n\n\n## Synopsis\n\n\n    sock_state_num2str:string(state:long)\n\n\n## Arguments\nThe state number\n\n\n\n" },
    { "name": "sock_state_str2num", "doc": "## Name\nfunction::sock_state_str2num — \n     Given a socket state string, return the corresponding state number\n\n\n\n## Synopsis\n\n\n    sock_state_str2num:long(state:string)\n\n\n## Arguments\nThe state name\n\n\n\n" },
    { "name": "inet_get_local_port", "doc": "## Name\nfunction::inet_get_local_port — \n  Provide local port number for a kernel socket\n\n\n\n## Synopsis\n\n\n    inet_get_local_port:long(sock:long)\n\n\n## Arguments\npointer to the kernel socket\n\n\n\n" },
    { "name": "sock_prot_num2str", "doc": "## Name\nfunction::sock_prot_num2str — \n     Given a protocol number, return a string representation\n\n\n\n## Synopsis\n\n\n    sock_prot_num2str:string(proto:long)\n\n\n## Arguments\nThe protocol number\n\n\n\n" },
    { "name": "ipmib_filter_key", "doc": "## Name\nfunction::ipmib_filter_key — \n  Default filter function for ipmib.* probes\n\n\n\n## Synopsis\n\n\n    ipmib_filter_key:long(skb:long,op:long,SourceIsLocal:long)\n\n\n## Arguments\npointer to the struct sk_buff\n    \n     value to be counted if skb passes the filter\n    \n     1 is local operation and 0 is non-local operation\n\n\n\n## Description\nThis function is a default filter function.\n   The user can replace this function with their own.\n   The user-supplied filter function returns an index key based on the values\n   in skb.\n   A return value of 0 means this particular skb should be not be counted.\n\n\n\n" },
    { "name": "ipmib_get_proto", "doc": "## Name\nfunction::ipmib_get_proto — \n     Get the protocol value\n\n\n\n## Synopsis\n\n\n    ipmib_get_proto:long(skb:long)\n\n\n## Arguments\npointer to a struct sk_buff\n\n\n\n## Description\nReturns the protocol value from skb.\n\n\n\n" },
    { "name": "ipmib_local_addr", "doc": "## Name\nfunction::ipmib_local_addr — \n     Get the local ip address\n\n\n\n## Synopsis\n\n\n    ipmib_local_addr:long(skb:long,SourceIsLocal:long)\n\n\n## Arguments\npointer to a struct sk_buff\n    \n     flag to indicate whether local operation\n\n\n\n## Description\nReturns the local ip address skb.\n\n\n\n" },
    { "name": "ipmib_remote_addr", "doc": "## Name\nfunction::ipmib_remote_addr — \n  Get the remote ip address\n\n\n\n## Synopsis\n\n\n    ipmib_remote_addr:long(skb:long,SourceIsLocal:long)\n\n\n## Arguments\npointer to a struct sk_buff\n    \n     flag to indicate whether local operation\n\n\n\n## Description\nReturns the remote ip address from skb.\n\n\n\n" },
    { "name": "ipmib_tcp_local_port", "doc": "## Name\nfunction::ipmib_tcp_local_port — \n     Get the local tcp port\n\n\n\n## Synopsis\n\n\n    ipmib_tcp_local_port:long(skb:long,SourceIsLocal:long)\n\n\n## Arguments\npointer to a struct sk_buff\n    \n     flag to indicate whether local operation\n\n\n\n## Description\nReturns the local tcp port from skb.\n\n\n\n" },
    { "name": "linuxmib_filter_key", "doc": "## Name\nfunction::linuxmib_filter_key — \n  Default filter function for linuxmib.* probes\n\n\n\n## Synopsis\n\n\n    linuxmib_filter_key:long(sk:long,op:long)\n\n\n## Arguments\npointer to the struct sock\n    \n     value to be counted if sk passes the filter\n\n\n\n## Description\nThis function is a default filter function.\n   The user can replace this function with their own.\n   The user-supplied filter function returns an index key based on the values\n   in sk.\n   A return value of 0 means this particular sk should be not be counted.\n\n\n\n" },
    { "name": "ipmib_tcp_remote_port", "doc": "## Name\nfunction::ipmib_tcp_remote_port — \n     Get the remote tcp port\n\n\n\n## Synopsis\n\n\n    ipmib_tcp_remote_port:long(skb:long,SourceIsLocal:long)\n\n\n## Arguments\npointer to a struct sk_buff\n    \n     flag to indicate whether local operation\n\n\n\n## Description\nReturns the remote tcp port from skb.\n\n\n\n" },
    { "name": "tcpmib_local_addr", "doc": "## Name\nfunction::tcpmib_local_addr — \n     Get the source address\n\n\n\n## Synopsis\n\n\n    tcpmib_local_addr:long(sk:long)\n\n\n## Arguments\npointer to a struct inet_sock\n\n\n\n## Description\nReturns the saddr from a struct inet_sock in host order.\n\n\n\n" },
    { "name": "tcpmib_local_port", "doc": "## Name\nfunction::tcpmib_local_port — \n     Get the local port\n\n\n\n## Synopsis\n\n\n    tcpmib_local_port:long(sk:long)\n\n\n## Arguments\npointer to a struct inet_sock\n\n\n\n## Description\nReturns the sport from a struct inet_sock in host order.\n\n\n\n" },
    { "name": "tcpmib_remote_port", "doc": "## Name\nfunction::tcpmib_remote_port — \n     Get the remote port\n\n\n\n## Synopsis\n\n\n    tcpmib_remote_port:long(sk:long)\n\n\n## Arguments\npointer to a struct inet_sock\n\n\n\n## Description\nReturns the dport from a struct inet_sock in host order.\n\n\n\n" },
    { "name": "tcpmib_remote_addr", "doc": "## Name\nfunction::tcpmib_remote_addr — \n     Get the remote address\n\n\n\n## Synopsis\n\n\n    tcpmib_remote_addr:long(sk:long)\n\n\n## Arguments\npointer to a struct inet_sock\n\n\n\n## Description\nReturns the daddr from a struct inet_sock in host order.\n\n\n\n" },
    { "name": "tcpmib_get_state", "doc": "## Name\nfunction::tcpmib_get_state — \n  Get a socket's state\n\n\n\n## Synopsis\n\n\n    tcpmib_get_state:long(sk:long)\n\n\n## Arguments\npointer to a struct sock\n\n\n\n## Description\nReturns the sk_state from a struct sock.\n\n\n\n" },
    { "name": "tcpmib_filter_key", "doc": "## Name\nfunction::tcpmib_filter_key — \n  Default filter function for tcpmib.* probes\n\n\n\n## Synopsis\n\n\n    tcpmib_filter_key:long(sk:long,op:long)\n\n\n## Arguments\npointer to the struct sock being acted on\n    \n     value to be counted if sk passes the filter\n\n\n\n## Description\nThis function is a default filter function.\n   The user can replace this function with their own.\n   The user-supplied filter function returns an index key based on the values\n   in sk.\n   A return value of 0 means this particular sk should be not be counted.\n\n\n\n" },
    { "name": "get_loadavg_index", "doc": "## Name\nfunction::get_loadavg_index — \n  Get the load average for a specified interval\n\n\n\n## Synopsis\n\n\n    get_loadavg_index:long(indx:long)\n\n\n## Arguments\nThe load average interval to capture.\n\n\n\n## Description\nThis function returns the load average at a specified interval.\n   The three load average values 1, 5 and 15 minute average corresponds to\n   indexes 0, 1 and 2 of the avenrun array - see linux/sched.h.\n   Please note that the truncated-integer portion of the load average is returned.\n   If the specified index is out-of-bounds, then an error message and exception is\n   thrown.\n\n\n\n" },
    { "name": "target_set_pid", "doc": "## Name\nfunction::target_set_pid — \n  Does pid descend from target process?\n\n\n\n## Synopsis\n\n\n    target_set_pid(pid:)\n\n\n## Arguments\nThe pid of the process to query\n\n\n\n## Description\nThis function returns whether the given process-id is\n   within the “target set”, that is whether it is a descendant of the\n   top-level target process.\n\n\n\n" },
    { "name": "sprint_loadavg", "doc": "## Name\nfunction::sprint_loadavg — \n     Report a pretty-printed load average\n\n\n\n## Synopsis\n\n\n    sprint_loadavg:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturns the a string with three decimal numbers\n   in the usual format for 1-, 5- and 15-minute load averages.\n\n\n\n" },
    { "name": "target_set_report", "doc": "## Name\nfunction::target_set_report — \n     Print a report about the target set\n\n\n\n## Synopsis\n\n\n    target_set_report()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function prints a report about the processes in the\n   target set, and their ancestry.\n\n\n\n" },
    { "name": "get_sa_flags", "doc": "## Name\nfunction::get_sa_flags — \n     Returns the numeric value of sa_flags\n\n\n\n## Synopsis\n\n\n    get_sa_flags:long(act:long)\n\n\n## Arguments\naddress of the sigaction to query.\n\n\n\n" },
    { "name": "get_sa_handler", "doc": "## Name\nfunction::get_sa_handler — \n     Returns the numeric value of sa_handler\n\n\n\n## Synopsis\n\n\n    get_sa_handler:long(act:long)\n\n\n## Arguments\naddress of the sigaction to query.\n\n\n\n" },
    { "name": "signal_str", "doc": "## Name\nfunction::signal_str — \n     Returns the string representation of a signal number\n\n\n\n## Synopsis\n\n\n    signal_str(num:)\n\n\n## Arguments\nthe signal number to convert to string.\n\n\n\n" },
    { "name": "is_sig_blocked", "doc": "## Name\nfunction::is_sig_blocked — \n     Returns 1 if the signal is currently blocked, or 0 if it is not\n\n\n\n## Synopsis\n\n\n    is_sig_blocked:long(task:long,sig:long)\n\n\n## Arguments\naddress of the task_struct to query.\n    \n     the signal number to test.\n\n\n\n" },
    { "name": "sa_flags_str", "doc": "## Name\nfunction::sa_flags_str — \n     Returns the string representation of sa_flags\n\n\n\n## Synopsis\n\n\n    sa_flags_str:string(sa_flags:long)\n\n\n## Arguments\nthe set of flags to convert to string.\n\n\n\n" },
    { "name": "sa_handler_str", "doc": "## Name\nfunction::sa_handler_str — \n     Returns the string representation of an sa_handler\n\n\n\n## Synopsis\n\n\n    sa_handler_str(handler:)\n\n\n## Arguments\nthe sa_handler to convert to string.\n\n\n\n## Description\nReturns the string representation of an sa_handler.\n   If it is not SIG_DFL, SIG_IGN or SIG_ERR, it will return the address\n   of the handler.\n\n\n\n" },
    { "name": "sigset_mask_str", "doc": "## Name\nfunction::sigset_mask_str — \n     Returns the string representation of a sigset\n\n\n\n## Synopsis\n\n\n    sigset_mask_str:string(mask:long)\n\n\n## Arguments\nthe sigset to convert to string.\n\n\n\n" },
    { "name": "return_str", "doc": "## Name\nfunction::return_str — \n     Formats the return value as a string\n\n\n\n## Synopsis\n\n\n    return_str:string(format:long,ret:long)\n\n\n## Arguments\nVariable to determine return type base value\n    \n     Return value (typically $return)\n\n\n\n## Description\nThis function is used by the syscall tapset, and \n   returns a string. Set format equal to 1 for a decimal, \n   2 for hex, 3 for octal.\n   \n\n   Note that this function is preferred over returnstr.\n\n\n\n" },
    { "name": "errno_str", "doc": "## Name\nfunction::errno_str — \n  Symbolic string associated with error code\n\n\n\n## Synopsis\n\n\n    errno_str:string(err:long)\n\n\n## Arguments\nThe error number received\n\n\n\n## Description\nThis function returns the symbolic string associated\n   with the giver error code, such as ENOENT for the number 2, or\n   E#3333 for an out-of-range value such as 3333.\n\n\n\n" },
    { "name": "returnval", "doc": "## Name\nfunction::returnval — \n     Possible return value of probed function\n\n\n\n## Synopsis\n\n\n    returnval:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nReturn the value of the register in which function values\n   are typically returned. Can be used in probes where $return isn't\n   available. This is only a guess of the actual return value and can be\n   totally wrong. Normally only used in dwarfless probes.\n\n\n\n" },
    { "name": "rlimit_from_str", "doc": "## Name\nfunction::rlimit_from_str — \n  Symbolic string associated with resource limit code\n\n\n\n## Synopsis\n\n\n    rlimit_from_str:long(lim_str:string)\n\n\n## Arguments\nThe string representation of limit\n\n\n\n## Description\nThis function returns the number associated\n   with the given string, such as 0 for the string RLIMIT_CPU, or\n   -1 for an out-of-range value.\n\n\n\n" },
    { "name": "MINOR", "doc": "## Name\nfunction::MINOR — \n     Extract minor device number from a kernel device number (kdev_t)\n\n\n\n## Synopsis\n\n\n    MINOR:long(dev:long)\n\n\n## Arguments\nKernel device number to query.\n\n\n\n" },
    { "name": "MKDEV", "doc": "## Name\nfunction::MKDEV — \n     Creates a value that can be compared to a kernel device number (kdev_t)\n\n\n\n## Synopsis\n\n\n    MKDEV:long(major:long,minor:long)\n\n\n## Arguments\nIntended major device number.\n    \n     Intended minor device number.\n\n\n\n" },
    { "name": "usrdev2kerndev", "doc": "## Name\nfunction::usrdev2kerndev — \n     Converts a user-space device number into the format used in the kernel\n\n\n\n## Synopsis\n\n\n    usrdev2kerndev:long(dev:long)\n\n\n## Arguments\nDevice number in user-space format.\n\n\n\n" },
    { "name": "d_name", "doc": "## Name\nfunction::d_name — \n  get the dirent name\n\n\n\n## Synopsis\n\n\n    d_name:string(dentry:long)\n\n\n## Arguments\nPointer to dentry.\n\n\n\n## Description\nReturns the dirent name (path basename).\n\n\n\n" },
    { "name": "d_path", "doc": "## Name\nfunction::d_path — \n     get the full nameidata path\n\n\n\n## Synopsis\n\n\n    d_path:string(nd:long)\n\n\n## Arguments\nPointer to nameidata.\n\n\n\n## Description\nReturns the full dirent name (full path to the root), like\n   the kernel d_path function.\n\n\n\n" },
    { "name": "fullpath_struct_file", "doc": "## Name\nfunction::fullpath_struct_file — \n     get the full path\n\n\n\n## Synopsis\n\n\n    fullpath_struct_file:string(task:long,file:long)\n\n\n## Arguments\ntask_struct pointer.\n    \n     Pointer to “struct file”.\n\n\n\n## Description\nReturns the full dirent name (full path to the root), like\n   the kernel d_path function.\n\n\n\n" },
    { "name": "fullpath_struct_nameidata", "doc": "## Name\nfunction::fullpath_struct_nameidata — \n     get the full nameidata path\n\n\n\n## Synopsis\n\n\n    fullpath_struct_nameidata(nd:)\n\n\n## Arguments\nPointer to “struct nameidata”.\n\n\n\n## Description\nReturns the full dirent name (full path to the root), like\n   the kernel (and systemtap-tapset) d_path function, with a “/”.\n\n\n\n" },
    { "name": "fullpath_struct_path", "doc": "## Name\nfunction::fullpath_struct_path — \n     get the full path\n\n\n\n## Synopsis\n\n\n    fullpath_struct_path:string(path:long)\n\n\n## Arguments\nPointer to “struct path”.\n\n\n\n## Description\nReturns the full dirent name (full path to the root), like\n   the kernel d_path function.\n\n\n\n" },
    { "name": "returnstr", "doc": "## Name\nfunction::returnstr — \n     Formats the return value as a string\n\n\n\n## Synopsis\n\n\n    returnstr:string(format:long)\n\n\n## Arguments\nVariable to determine return type base value\n\n\n\n## Description\nThis function is used by the nd_syscall tapset, and \n   returns a string. Set format equal to 1 for a decimal, \n   2 for hex, 3 for octal.\n   \n\n   Note that this function should only be used in dwarfless probes\n   (i.e. 'kprobe.function(“foo”)').  Other probes should use\n   return_str.\n\n\n\n" },
    { "name": "inode_name", "doc": "## Name\nfunction::inode_name — \n     get the inode name\n\n\n\n## Synopsis\n\n\n    inode_name:string(inode:long)\n\n\n## Arguments\nPointer to inode.\n\n\n\n## Description\nReturns the first path basename associated with the given inode.\n\n\n\n" },
    { "name": "MAJOR", "doc": "## Name\nfunction::MAJOR — \n  Extract major device number from a kernel device number (kdev_t)\n\n\n\n## Synopsis\n\n\n    MAJOR:long(dev:long)\n\n\n## Arguments\nKernel device number to query.\n\n\n\n" },
    { "name": "inode_path", "doc": "## Name\nfunction::inode_path — \n     get the path to an inode\n\n\n\n## Synopsis\n\n\n    inode_path:string(inode:long)\n\n\n## Arguments\nPointer to inode.\n\n\n\n## Description\nReturns the full path associated with the given inode.\n\n\n\n" },
    { "name": "reverse_path_walk", "doc": "## Name\nfunction::reverse_path_walk — \n     get the full dirent path\n\n\n\n## Synopsis\n\n\n    reverse_path_walk:string(dentry:long)\n\n\n## Arguments\nPointer to dentry.\n\n\n\n## Description\nReturns the path name (partial path to mount point).\n\n\n\n" },
    { "name": "task_dentry_path", "doc": "## Name\nfunction::task_dentry_path — \n     get the full dentry path\n\n\n\n## Synopsis\n\n\n    task_dentry_path:string(task:long,dentry:long,vfsmnt:long)\n\n\n## Arguments\ntask_struct pointer.\n    \n     direntry pointer.\n    \n     vfsmnt pointer.\n\n\n\n## Description\nReturns the full dirent name (full path to the root), like\n   the kernel d_path function.\n\n\n\n" },
    { "name": "abort", "doc": "## Name\nfunction::abort — \n     Immediately shutting down probing script.\n\n\n\n## Synopsis\n\n\n    abort()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis is similar to exit but immediately aborts\n   the current probe handler instead of waiting for its\n   completion. Probe handlers already running on *other* CPU cores,\n   however, will still continue to their completion. Unlike error,\n   this function call cannot be caught by 'try ... catch'.\n\n\n\n" },
    { "name": "error", "doc": "## Name\nfunction::error — \n     Send an error message\n\n\n\n## Synopsis\n\n\n    error(msg:string)\n\n\n## Arguments\nThe formatted message string\n\n\n\n## Description\nAn implicit end-of-line is added.  staprun prepends\n   the string “ERROR:”.  Sending an error message aborts the currently\n   running probe.  Depending on the MAXERRORS parameter, it may\n   trigger an exit.\n\n\n\n" },
    { "name": "exit", "doc": "## Name\nfunction::exit — \n     Start shutting down probing script.\n\n\n\n## Synopsis\n\n\n    exit()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis only enqueues a request to start\n   shutting down the script.  New probes will not fire\n   (except “end” probes), but all currently   \n   running ones may complete their work.\n\n\n\n" },
    { "name": "ftrace", "doc": "## Name\nfunction::ftrace — \n  Send a message to the ftrace ring-buffer\n\n\n\n## Synopsis\n\n\n    ftrace(msg:string)\n\n\n## Arguments\nThe formatted message string\n\n\n\n## Description\nIf the ftrace ring-buffer is configured & available,\n   see /debugfs/tracing/trace for the message.  Otherwise, the\n   message may be quietly dropped.  An implicit end-of-line is added.\n\n\n\n" },
    { "name": "log", "doc": "## Name\nfunction::log — \n  Send a line to the common trace buffer\n\n\n\n## Synopsis\n\n\n    log(msg:string)\n\n\n## Arguments\nThe formatted message string\n\n\n\n## Description\nThis function logs data. log sends the\n   message immediately to staprun and to the bulk transport\n   (relayfs) if it is being used. If the last character given\n   is not a newline, then one is added. This function is not \n   as efficient as printf and should be used only for urgent\n   messages.\n\n\n\n" },
    { "name": "printk", "doc": "## Name\nfunction::printk — \n     Send a message to the kernel trace buffer\n\n\n\n## Synopsis\n\n\n    printk(level:long,msg:string)\n\n\n## Arguments\nan integer for the severity level (0=KERN_EMERG ... 7=KERN_DEBUG)\n    \n     The formatted message string\n\n\n\n## Description\nPrint a line of text to the kernel dmesg/console with the\n   given severity.  An implicit end-of-line is added.  This function may \n   not be safely called from all kernel probe contexts, so is restricted\n   to guru mode only.\n\n\n\n" },
    { "name": "warn", "doc": "## Name\nfunction::warn — \n     Send a line to the warning stream\n\n\n\n## Synopsis\n\n\n    warn(msg:string)\n\n\n## Arguments\nThe formatted message string\n\n\n\n## Description\nThis function sends a warning message immediately to \n   staprun. It is also sent over the bulk transport (relayfs) if it is\n   being used. If the last characater is not a newline, the one is added.\n\n\n\n" },
    { "name": "real_mount", "doc": "## Name\nfunction::real_mount — \n     get the 'struct mount' pointer\n\n\n\n## Synopsis\n\n\n    real_mount:long(vfsmnt:long)\n\n\n## Arguments\nPointer to 'struct vfsmount'\n\n\n\n## Description\nReturns the 'struct mount' pointer value for a 'struct vfsmount'\n   pointer.\n\n\n\n" },
    { "name": "qs_done", "doc": "## Name\nfunction::qs_done — \n     Function to record finishing request\n\n\n\n## Synopsis\n\n\n    qs_done(qname:string)\n\n\n## Arguments\nthe name of the service that finished\n\n\n\n## Description\nThis function records that a request \n   originally from the given queue has completed being \n   serviced.\n\n\n\n" },
    { "name": "qs_wait", "doc": "## Name\nfunction::qs_wait — \n  Function to record enqueue requests\n\n\n\n## Synopsis\n\n\n    qs_wait(qname:string)\n\n\n## Arguments\nthe name of the queue requesting enqueue\n\n\n\n## Description\nThis function records that a new request\n   was enqueued for the given queue name.\n\n\n\n" },
    { "name": "qs_run", "doc": "## Name\nfunction::qs_run — \n     Function to record being moved from wait queue to being serviced\n\n\n\n## Synopsis\n\n\n    qs_run(qname:string)\n\n\n## Arguments\nthe name of the service being moved and started\n\n\n\n## Description\nThis function records that the previous enqueued\n   request was removed from the given wait queue and is now \n   being serviced.\n\n\n\n" },
    { "name": "assert", "doc": "## Name\nfunction::assert — \n     evaluate assertion\n\n\n\n## Synopsis\n\n\n1) assert(expression:long)2) assert(expression:long,msg:string)\n\n## Arguments\nThe expression to evaluate\n    \n     The formatted message string\n\n\n\n## Description\n1) This function checks the expression and aborts the\n   current running probe if expression evaluates to zero. Useserror\n   and may be caught by try{} catch{}. A default message will be\n   displayed.\n2) This function checks the expression and aborts the\n   current running probe if expression evaluates to zero. Useserror\n   and may be caught by try{} catch{}. The specified message will be\n   displayed.\n\n\n\n" },
    { "name": "qsq_blocked", "doc": "## Name\nfunction::qsq_blocked — \n     Returns the time reqest was on the wait queue\n\n\n\n## Synopsis\n\n\n    qsq_blocked:long(qname:string,scale:long)\n\n\n## Arguments\nqueue name\n    \n     scale variable to take account for interval fraction\n\n\n\n## Description\nThis function returns the fraction of elapsed time during\n   which one or more requests were on the wait queue.\n\n\n\n" },
    { "name": "qsq_print", "doc": "## Name\nfunction::qsq_print — \n     Prints a line of statistics for the given queue\n\n\n\n## Synopsis\n\n\n    qsq_print(qname:string)\n\n\n## Arguments\nqueue name\n\n\n\n## Description\nThis function prints a line containing the following\n\n\n\n## statistics for the given queue\nthe queue name, \n   the average rate of requests per second,\n   the average wait queue length,\n   the average time on the wait queue,\n   the average time to service a request,\n   the percentage of time the wait queue was used, \n   and the percentage of time request was being serviced.\n\n\n\n" },
    { "name": "qsq_service_time", "doc": "## Name\nfunction::qsq_service_time — \n     Amount of time per request service\n\n\n\n## Synopsis\n\n\n    qsq_service_time:long(qname:string,scale:long)\n\n\n## Arguments\nqueue name\n    \n     scale variable to take account for interval fraction\n\n\n\n## Description\nThis function returns the average time in microseconds\n   required to service a request once it is removed from the wait queue.\n\n\n\n" },
    { "name": "qsq_throughput", "doc": "## Name\nfunction::qsq_throughput — \n     Number of requests served per unit time\n\n\n\n## Synopsis\n\n\n    qsq_throughput:long(qname:string,scale:long)\n\n\n## Arguments\nqueue name\n    \n     scale variable to take account for interval fraction\n\n\n\n## Description\nThis function returns the average number or requests\n   served per microsecond.\n\n\n\n" },
    { "name": "qsq_start", "doc": "## Name\nfunction::qsq_start — \n     Function to reset the stats for a queue\n\n\n\n## Synopsis\n\n\n    qsq_start(qname:string)\n\n\n## Arguments\nthe name of the service that finished\n\n\n\n## Description\nThis function resets the statistics counters for the given\n   queue, and restarts tracking from the moment the function was called.\n   This function is also used to create intialize a queue.\n\n\n\n" },
    { "name": "qsq_utilization", "doc": "## Name\nfunction::qsq_utilization — \n     Fraction of time that any request was being serviced\n\n\n\n## Synopsis\n\n\n    qsq_utilization:long(qname:string,scale:long)\n\n\n## Arguments\nqueue name\n    \n     scale variable to take account for interval fraction\n\n\n\n## Description\nThis function returns the average time in microseconds\n   that at least one request was being serviced.\n\n\n\n" },
    { "name": "qsq_wait_queue_length", "doc": "## Name\nfunction::qsq_wait_queue_length — \n     length of wait queue\n\n\n\n## Synopsis\n\n\n    qsq_wait_queue_length:long(qname:string,scale:long)\n\n\n## Arguments\nqueue name\n    \n     scale variable to take account for interval fraction\n\n\n\n## Description\nThis function returns the average length of the wait queue\n\n\n\n" },
    { "name": "qsq_wait_time", "doc": "## Name\nfunction::qsq_wait_time — \n     Amount of time in queue + service per request\n\n\n\n## Synopsis\n\n\n    qsq_wait_time:long(qname:string,scale:long)\n\n\n## Arguments\nqueue name\n    \n     scale variable to take account for interval fraction\n\n\n\n## Description\nThis function returns the average time in microseconds\n   that it took for a request to be serviced (qs_wait to qa_done).\n\n\n\n" },
    { "name": "randint", "doc": "## Name\nfunction::randint — \n  Return a random number between [0,n)\n\n\n\n## Synopsis\n\n\n    randint:long(n:long)\n\n\n## Arguments\nNumber past upper limit of range, not larger than 2**20.\n\n\n\n" },
    { "name": "atomic_long_read", "doc": "## Name\nfunction::atomic_long_read — \n     Retrieves an atomic long variable from kernel memory\n\n\n\n## Synopsis\n\n\n    atomic_long_read:long(addr:long)\n\n\n## Arguments\npointer to atomic long variable\n\n\n\n## Description\nSafely perform the read of an atomic long variable. This will be a\n   NOP on kernels that do not have ATOMIC_LONG_INIT set on the kernel config.\n\n\n\n" },
    { "name": "atomic_read", "doc": "## Name\nfunction::atomic_read — \n  Retrieves an atomic variable from kernel memory\n\n\n\n## Synopsis\n\n\n    atomic_read:long(addr:long)\n\n\n## Arguments\npointer to atomic variable\n\n\n\n## Description\nSafely perform the read of an atomic variable.\n\n\n\n" },
    { "name": "kernel_buffer_quoted", "doc": "## Name\nfunction::kernel_buffer_quoted — \n     Retrieves and quotes buffer from kernel space\n\n\n\n## Synopsis\n\n\n1) kernel_buffer_quoted:string(addr:long,inlen:long)2) kernel_buffer_quoted:string(addr:long,inlen:long,outlen:long)\n\n## Arguments\nthe kernel space address to retrieve the buffer from\n    \n     the exact length of the buffer to read\n    \n     the maximum length of the output string\n\n\n\n## Description\n1) Reads inlen characters of a buffer from the given kernel space\n   memory address, and returns up to MAXSTRINGLEN characters, where any ASCII\n   characters that are not printable are replaced by the corresponding escape\n   sequence in the returned string. Note that the string will be surrounded by\n   double quotes. On the rare cases when kernel space data is not accessible at\n   the given address, the address itself is returned as a string, without\n   double quotes.2) Reads inlen characters of a buffer from the given kernel space\n   memory address, and returns up to outlen characters, where any ASCII\n   characters that are not printable are replaced by the corresponding escape\n   sequence in the returned string. Note that the string will be surrounded by\n   double quotes. On the rare cases when kernel space data is not accessible at\n   the given address, the address itself is returned as a string, without\n   double quotes.\n\n\n\n" },
    { "name": "kernel_buffer_quoted_error", "doc": "## Name\nfunction::kernel_buffer_quoted_error — \n     Retrieves and quotes buffer from kernel space\n\n\n\n## Synopsis\n\n\n    kernel_buffer_quoted_error:string(addr:long,inlen:long,outlen:long)\n\n\n## Arguments\nthe kernel space address to retrieve the buffer from\n    \n     the exact length of the buffer to read\n    \n     the maximum length of the output string\n\n\n\n## Description\nReads inlen characters of a buffer from the given kernel space\n   memory address, and returns up to outlen characters, where any ASCII\n   characters that are not printable are replaced by the corresponding escape\n   sequence in the returned string. Note that the string will be surrounded by\n   double quotes. On the rare cases when kernel space data is not accessible at\n   the given address, an error is thrown.\n\n\n\n" },
    { "name": "kernel_char", "doc": "## Name\nfunction::kernel_char — \n     Retrieves a char value stored in kernel memory\n\n\n\n## Synopsis\n\n\n    kernel_char:long(addr:long)\n\n\n## Arguments\nThe kernel address to retrieve the char from\n\n\n\n## Description\nReturns the char value from a given kernel memory address.\n   Reports an error when reading from the given address fails.\n\n\n\n" },
    { "name": "kernel_int", "doc": "## Name\nfunction::kernel_int — \n     Retrieves an int value stored in kernel memory\n\n\n\n## Synopsis\n\n\n    kernel_int:long(addr:long)\n\n\n## Arguments\nThe kernel address to retrieve the int from\n\n\n\n## Description\nReturns the int value from a given kernel memory address.\n   Reports an error when reading from the given address fails.\n\n\n\n" },
    { "name": "kernel_long", "doc": "## Name\nfunction::kernel_long — \n     Retrieves a long value stored in kernel memory\n\n\n\n## Synopsis\n\n\n    kernel_long:long(addr:long)\n\n\n## Arguments\nThe kernel address to retrieve the long from\n\n\n\n## Description\nReturns the long value from a given kernel memory address.\n   Reports an error when reading from the given address fails.\n\n\n\n" },
    { "name": "kernel_pointer", "doc": "## Name\nfunction::kernel_pointer — \n     Retrieves a pointer value stored in kernel memory\n\n\n\n## Synopsis\n\n\n    kernel_pointer:long(addr:long)\n\n\n## Arguments\nThe kernel address to retrieve the pointer from\n\n\n\n## Description\nReturns the pointer value from a given kernel memory\n   address. Reports an error when reading from the given address\n   fails.\n\n\n\n" },
    { "name": "kernel_short", "doc": "## Name\nfunction::kernel_short — \n     Retrieves a short value stored in kernel memory\n\n\n\n## Synopsis\n\n\n    kernel_short:long(addr:long)\n\n\n## Arguments\nThe kernel address to retrieve the short from\n\n\n\n## Description\nReturns the short value from a given kernel memory address.\n   Reports an error when reading from the given address fails.\n\n\n\n" },
    { "name": "kernel_string_n", "doc": "## Name\nfunction::kernel_string_n — \n     Retrieves string of given length from kernel memory\n\n\n\n## Synopsis\n\n\n    kernel_string_n:string(addr:long,n:long)\n\n\n## Arguments\nThe kernel address to retrieve the string from\n    \n     The maximum length of the string (if not null terminated)\n\n\n\n## Description\nReturns the C string of a maximum given length from a\n   given kernel memory address. Reports an error on string copy fault.\n\n\n\n" },
    { "name": "kernel_string_quoted", "doc": "## Name\nfunction::kernel_string_quoted — \n     Retrieves and quotes string from kernel memory\n\n\n\n## Synopsis\n\n\n    kernel_string_quoted:string(addr:long)\n\n\n## Arguments\nthe kernel memory address to retrieve the string from\n\n\n\n## Description\nReturns the null terminated C string from a given kernel\n   memory address where any ASCII characters that are not printable are\n   replaced by the corresponding escape sequence in the returned string. Note\n   that the string will be surrounded by double quotes. If the kernel memory\n   data is not accessible at the given address, the address itself is returned\n   as a string, without double quotes.\n\n\n\n" },
    { "name": "kernel_string", "doc": "## Name\nfunction::kernel_string — \n  Retrieves string from kernel memory\n\n\n\n## Synopsis\n\n\n1) kernel_string:string(addr:long)2) kernel_string:string(addr:long,err_msg:string)\n\n## Arguments\nThe kernel address to retrieve the string from\n    \n     The error message to return when data isn't available\n\n\n\n## Description\n1) This function returns the null terminated C string\n   from a given kernel memory address. Reports an error on string\n   copy fault.2) This function returns the null terminated C string\n   from a given kernel memory address. Reports the given error message\n   on string copy fault.\n\n\n\n" },
    { "name": "kernel_string_quoted_utf16", "doc": "## Name\nfunction::kernel_string_quoted_utf16 — \n     Quote given kernel UTF-16 string.\n\n\n\n## Synopsis\n\n\n    kernel_string_quoted_utf16:string(addr:long)\n\n\n## Arguments\nThe kernel address to retrieve the string from\n\n\n\n## Description\nThis function combines quoting as per string_quoted\n   and UTF-16 decoding as per kernel_string_utf16.\n\n\n\n" },
    { "name": "kernel_string_utf16", "doc": "## Name\nfunction::kernel_string_utf16 — \n     Retrieves UTF-16 string from kernel memory\n\n\n\n## Synopsis\n\n\n1) kernel_string_utf16:string(addr:long)2) kernel_string_utf16:string(addr:long,err_msg:string)\n\n## Arguments\nThe kernel address to retrieve the string from\n    \n     The error message to return when data isn't available\n\n\n\n## Description\n1) This function returns a null terminated UTF-8 string converted\n   from the UTF-16 string at a given kernel memory address. Reports an error on\n   string copy fault or conversion error.2) This function returns a null terminated UTF-8 string converted\n   from the UTF-16 string at a given kernel memory address. Reports the given\n   error message on string copy fault or conversion error.\n\n\n\n" },
    { "name": "user_buffer_quoted", "doc": "## Name\nfunction::user_buffer_quoted — \n     Retrieves and quotes buffer from user space\n\n\n\n## Synopsis\n\n\n    user_buffer_quoted:string(addr:long,inlen:long,outlen:long)\n\n\n## Arguments\nthe user space address to retrieve the buffer from\n    \n     the exact length of the buffer to read\n    \n     the maximum length of the output string\n\n\n\n## Description\nReads inlen characters of a buffer from the given user space\n   memory address, and returns up to outlen characters, where any ASCII\n   characters that are not printable are replaced by the corresponding escape\n   sequence in the returned string. Note that the string will be surrounded by\n   double quotes. On the rare cases when user space data is not accessible at\n   the given address, the address itself is returned as a string, without\n   double quotes.\n\n\n\n" },
    { "name": "user_buffer_quoted_error", "doc": "## Name\nfunction::user_buffer_quoted_error — \n     Retrieves and quotes buffer from user space\n\n\n\n## Synopsis\n\n\n    user_buffer_quoted_error:string(addr:long,inlen:long,outlen:long)\n\n\n## Arguments\nthe user space address to retrieve the buffer from\n    \n     the exact length of the buffer to read\n    \n     the maximum length of the output string\n\n\n\n## Description\nReads inlen characters of a buffer from the given user space\n   memory address, and returns up to outlen characters, where any ASCII\n   characters that are not printable are replaced by the corresponding escape\n   sequence in the returned string. Note that the string will be surrounded by\n   double quotes. On the rare cases when user space data is not accessible at\n   the given address, an error is thrown.\n\n\n\n" },
    { "name": "user_char", "doc": "## Name\nfunction::user_char — \n     Retrieves a char value stored in user space\n\n\n\n## Synopsis\n\n\n    user_char:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the char from\n\n\n\n## Description\nReturns the char value from a given user space address.\n   Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_char_error", "doc": "## Name\nfunction::user_char_error — \n     Retrieves a char value stored in user space\n\n\n\n## Synopsis\n\n\n    user_char_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the char from\n\n\n\n## Description\nReturns the char value from a given user space address.\n   If the user space data is not accessible, an error will occur.\n\n\n\n" },
    { "name": "user_char_warn", "doc": "## Name\nfunction::user_char_warn — \n     Retrieves a char value stored in user space\n\n\n\n## Synopsis\n\n\n    user_char_warn:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the char from\n\n\n\n## Description\nReturns the char value from a given user space\n   address.  Returns zero when user space data is not accessible and\n   warns about the failure (but does not error).\n\n\n\n" },
    { "name": "user_int", "doc": "## Name\nfunction::user_int — \n     Retrieves an int value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the int from\n\n\n\n## Description\nReturns the int value from a given user space address.\n   Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_int16_error", "doc": "## Name\nfunction::user_int16_error — \n     Retrieves a 16-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int16_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 16-bit integer from\n\n\n\n## Description\nReturns the 16-bit integer value from a given user\n   space address.  If the user space data is not accessible, an error\n   will occur.\n\n\n\n" },
    { "name": "user_int32", "doc": "## Name\nfunction::user_int32 — \n     Retrieves a 32-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int32:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 32-bit integer from\n\n\n\n## Description\nReturns the 32-bit integer value from a given user space\n   address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_int64", "doc": "## Name\nfunction::user_int64 — \n     Retrieves a 64-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int64:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 64-bit integer from\n\n\n\n## Description\nReturns the 64-bit integer value from a given user space\n   address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_int32_error", "doc": "## Name\nfunction::user_int32_error — \n     Retrieves a 32-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int32_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 32-bit integer from\n\n\n\n## Description\nReturns the 32-bit integer value from a given user\n   space address.  If the user space data is not accessible, an error\n   will occur.\n\n\n\n" },
    { "name": "user_int64_error", "doc": "## Name\nfunction::user_int64_error — \n     Retrieves a 64-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int64_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 64-bit integer from\n\n\n\n## Description\nReturns the 64-bit integer value from a given user\n   space address.  If the user space data is not accessible, an error\n   will occur.\n\n\n\n" },
    { "name": "user_int8", "doc": "## Name\nfunction::user_int8 — \n     Retrieves a 8-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int8:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 8-bit integer from\n\n\n\n## Description\nReturns the 8-bit integer value from a given user space\n   address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_int_error", "doc": "## Name\nfunction::user_int_error — \n     Retrieves an int value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the int from\n\n\n\n## Description\nReturns the int value from a given user space address.\n   If the user space data is not accessible, an error will occur.\n\n\n\n" },
    { "name": "user_int8_error", "doc": "## Name\nfunction::user_int8_error — \n     Retrieves a 8-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int8_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 8-bit integer from\n\n\n\n## Description\nReturns the 8-bit integer value from a given user\n   space address.  If the user space data is not accessible, an error\n   will occur.\n\n\n\n" },
    { "name": "user_int_warn", "doc": "## Name\nfunction::user_int_warn — \n     Retrieves an int value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int_warn:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the int from\n\n\n\n## Description\nReturns the int value from a given user space address.\n   Returns zero when user space data is not accessible and warns about\n   the failure (but does not error).\n\n\n\n" },
    { "name": "user_long", "doc": "## Name\nfunction::user_long — \n     Retrieves a long value stored in user space\n\n\n\n## Synopsis\n\n\n    user_long:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the long from\n\n\n\n## Description\nReturns the long value from a given user space address.\n   Returns zero when user space data is not accessible. Note that the\n   size of the long depends on the architecture of the current user space\n   task (for those architectures that support both 64/32 bit compat tasks).\n\n\n\n" },
    { "name": "user_long_error", "doc": "## Name\nfunction::user_long_error — \n     Retrieves a long value stored in user space\n\n\n\n## Synopsis\n\n\n    user_long_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the long from\n\n\n\n## Description\nReturns the long value from a given user space\n   address.  If the user space data is not accessible, an error will\n   occur.  Note that the size of the long depends on the architecture\n   of the current user space task (for those architectures that\n   support both 64/32 bit compat tasks).\n\n\n\n" },
    { "name": "user_short", "doc": "## Name\nfunction::user_short — \n     Retrieves a short value stored in user space\n\n\n\n## Synopsis\n\n\n    user_short:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the short from\n\n\n\n## Description\nReturns the short value from a given user space address.\n   Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_short_error", "doc": "## Name\nfunction::user_short_error — \n     Retrieves a short value stored in user space\n\n\n\n## Synopsis\n\n\n    user_short_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the short from\n\n\n\n## Description\nReturns the short value from a given user space address.\n   If the user space data is not accessible, an error will occur.\n\n\n\n" },
    { "name": "user_long_warn", "doc": "## Name\nfunction::user_long_warn — \n     Retrieves a long value stored in user space\n\n\n\n## Synopsis\n\n\n    user_long_warn:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the long from\n\n\n\n## Description\nReturns the long value from a given user space\n   address.  Returns zero when user space data is not accessible and\n   warns about the failure (but does not error).  Note that the size\n   of the long depends on the architecture of the current user space\n   task (for those architectures that support both 64/32 bit compat\n   tasks).\n\n\n\n" },
    { "name": "user_short_warn", "doc": "## Name\nfunction::user_short_warn — \n     Retrieves a short value stored in user space\n\n\n\n## Synopsis\n\n\n    user_short_warn:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the short from\n\n\n\n## Description\nReturns the short value from a given user space\n   address.  Returns zero when user space data is not accessible and\n   warns about the failure (but does not error).\n\n\n\n" },
    { "name": "user_int16", "doc": "## Name\nfunction::user_int16 — \n     Retrieves a 16-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_int16:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the 16-bit integer from\n\n\n\n## Description\nReturns the 16-bit integer value from a given user space\n   address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_string", "doc": "## Name\nfunction::user_string — \n  Retrieves string from user space\n\n\n\n## Synopsis\n\n\n1) user_string:string(addr:long)2) user_string:string(addr:long,err_msg:string)\n\n## Arguments\nthe user space address to retrieve the string from\n    \n     the error message to return when data isn't available\n\n\n\n## Description\n1) Returns the null terminated C string from a given user space\n   memory address. Reports an error on the rare cases when userspace\n   data is not accessible.2) Returns the null terminated C string from a given user space\n   memory address. Reports the given error message on the rare cases when\n   userspace data is not accessible.\n\n\n\n" },
    { "name": "user_string_n", "doc": "## Name\nfunction::user_string_n — \n     Retrieves string of given length from user space\n\n\n\n## Synopsis\n\n\n1) user_string_n:string(addr:long,n:long)2) user_string_n:string(addr:long,n:long,err_msg:string)\n\n## Arguments\nthe user space address to retrieve the string from\n    \n     the maximum length of the string (if not null terminated)\n    \n     the error message to return when data isn't available\n\n\n\n## Description\n1) Returns the C string of a maximum given length from a\n   given user space address. Reports an error on the rare cases\n   when userspace data is not accessible at the given address.2) Returns the C string of a maximum given length from a\n   given user space address. Returns the given error message string on\n   the rare cases when userspace data is not accessible at the given\n   address.\n\n\n\n" },
    { "name": "user_string_n_warn", "doc": "## Name\nfunction::user_string_n_warn — \n     Retrieves string from user space\n\n\n\n## Synopsis\n\n\n1) user_string_n_warn:string(addr:long,n:long)2) user_string_n_warn:string(addr:long,n:long,warn_msg:string)\n\n## Arguments\nthe user space address to retrieve the string from\n    \n     the maximum length of the string (if not null terminated)\n    \n     the warning message to return when data isn't available\n\n\n\n## Description\n1) Returns up to n characters of a C string from a given\n   user space memory address. Reports“<unknown>” on the rare cases\n   when userspace data is not accessible and warns (but does not abort)\n   about the failure.\n2) Returns up to n characters of a C string from a given\n   user space memory address. Reports the given warning message on the\n   rare cases when userspace data is not accessible and warns (but does\n   not abort) about the failure.\n\n\n\n" },
    { "name": "kernel_string_quoted_utf32", "doc": "## Name\nfunction::kernel_string_quoted_utf32 — \n     Quote given UTF-32 kernel string.\n\n\n\n## Synopsis\n\n\n    kernel_string_quoted_utf32:string(addr:long)\n\n\n## Arguments\nThe kernel address to retrieve the string from\n\n\n\n## Description\nThis function combines quoting as per string_quoted\n   and UTF-32 decoding as per kernel_string_utf32.\n\n\n\n" },
    { "name": "user_string_quoted", "doc": "## Name\nfunction::user_string_quoted — \n     Retrieves and quotes string from user space\n\n\n\n## Synopsis\n\n\n    user_string_quoted:string(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the string from\n\n\n\n## Description\nReturns the null terminated C string from a given user space\n   memory address where any ASCII characters that are not printable are\n   replaced by the corresponding escape sequence in the returned string. Note\n   that the string will be surrounded by double quotes. On the rare cases when\n   userspace data is not accessible at the given address, the address itself is\n   returned as a string, without double quotes.\n\n\n\n" },
    { "name": "kernel_string_utf32", "doc": "## Name\nfunction::kernel_string_utf32 — \n     Retrieves UTF-32 string from kernel memory\n\n\n\n## Synopsis\n\n\n1) kernel_string_utf32:string(addr:long)2) kernel_string_utf32:string(addr:long,err_msg:string)\n\n## Arguments\nThe kernel address to retrieve the string from\n    \n     The error message to return when data isn't available\n\n\n\n## Description\n1) This function returns a null terminated UTF-8 string converted\n   from the UTF-32 string at a given kernel memory address. Reports an error on\n   string copy fault or conversion error.2) This function returns a null terminated UTF-8 string converted\n   from the UTF-32 string at a given kernel memory address. Reports the given\n   error message on string copy fault or conversion error.\n\n\n\n" },
    { "name": "user_string_quoted_utf32", "doc": "## Name\nfunction::user_string_quoted_utf32 — \n     Quote given user UTF-32 string.\n\n\n\n## Synopsis\n\n\n    user_string_quoted_utf32:string(addr:long)\n\n\n## Arguments\nThe user address to retrieve the string from\n\n\n\n## Description\nThis function combines quoting as per string_quoted\n   and UTF-32 decoding as per user_string_utf32.\n\n\n\n" },
    { "name": "user_string_utf16", "doc": "## Name\nfunction::user_string_utf16 — \n     Retrieves UTF-16 string from user memory\n\n\n\n## Synopsis\n\n\n1) user_string_utf16:string(addr:long)2) user_string_utf16:string(addr:long,err_msg:string)\n\n## Arguments\nThe user address to retrieve the string from\n    \n     The error message to return when data isn't available\n\n\n\n## Description\n1) This function returns a null terminated UTF-8 string converted\n   from the UTF-16 string at a given user memory address. Reports an error on\n   string copy fault or conversion error.2) This function returns a null terminated UTF-8 string converted\n   from the UTF-16 string at a given user memory address. Reports the given\n   error message on string copy fault or conversion error.\n\n\n\n" },
    { "name": "user_string_quoted_utf16", "doc": "## Name\nfunction::user_string_quoted_utf16 — \n     Quote given user UTF-16 string.\n\n\n\n## Synopsis\n\n\n    user_string_quoted_utf16:string(addr:long)\n\n\n## Arguments\nThe user address to retrieve the string from\n\n\n\n## Description\nThis function combines quoting as per string_quoted\n   and UTF-16 decoding as per user_string_utf16.\n\n\n\n" },
    { "name": "user_string_utf32", "doc": "## Name\nfunction::user_string_utf32 — \n     Retrieves UTF-32 string from user memory\n\n\n\n## Synopsis\n\n\n1) user_string_utf32:string(addr:long)2) user_string_utf32:string(addr:long,err_msg:string)\n\n## Arguments\nThe user address to retrieve the string from\n    \n     The error message to return when data isn't available\n\n\n\n## Description\n1) This function returns a null terminated UTF-8 string converted\n   from the UTF-32 string at a given user memory address. Reports an error on\n   string copy fault or conversion error.2) This function returns a null terminated UTF-8 string converted\n   from the UTF-32 string at a given user memory address. Reports the given\n   error message on string copy fault or conversion error.\n\n\n\n" },
    { "name": "user_string_warn", "doc": "## Name\nfunction::user_string_warn — \n     Retrieves string from user space\n\n\n\n## Synopsis\n\n\n1) user_string_warn:string(addr:long)2) user_string_warn:string(addr:long,warn_msg:string)\n\n## Arguments\nthe user space address to retrieve the string from\n    \n     the warning message to return when data isn't available\n\n\n\n## Description\n1) Returns the null terminated C string from a given user space\n   memory address. Reports \"\" on the rare cases when userspace data is\n   not accessible and warns (but does not abort) about the failure.2) Returns the null terminated C string from a given user space\n   memory address. Reports the given warning message on the rare cases\n   when userspace data is not accessible and warns (but does not abort)\n   about the failure.\n\n\n\n" },
    { "name": "user_uint16", "doc": "## Name\nfunction::user_uint16 — \n     Retrieves an unsigned 16-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint16:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 16-bit integer from\n\n\n\n## Description\nReturns the unsigned 16-bit integer value from a given user\n   space address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_uint16_error", "doc": "## Name\nfunction::user_uint16_error — \n     Retrieves an unsigned 16-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint16_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 16-bit integer from\n\n\n\n## Description\nReturns the unsigned 16-bit integer value from a given user\n   space address.  If the user space data is not accessible, an error\n   will occur.\n\n\n\n" },
    { "name": "user_uint32", "doc": "## Name\nfunction::user_uint32 — \n     Retrieves an unsigned 32-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint32:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 32-bit integer from\n\n\n\n## Description\nReturns the unsigned 32-bit integer value from a given user\n   space address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_uint32_error", "doc": "## Name\nfunction::user_uint32_error — \n     Retrieves an unsigned 32-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint32_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 32-bit integer from\n\n\n\n## Description\nReturns the unsigned 32-bit integer value from a given\n   user space address.  If the user space data is not accessible, an\n   error will occur.\n\n\n\n" },
    { "name": "user_uint64", "doc": "## Name\nfunction::user_uint64 — \n     Retrieves an unsigned 64-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint64:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 64-bit integer from\n\n\n\n## Description\nReturns the unsigned 64-bit integer value from a given user\n   space address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_uint64_error", "doc": "## Name\nfunction::user_uint64_error — \n     Retrieves an unsigned 64-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint64_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 64-bit integer from\n\n\n\n## Description\nReturns the unsigned 64-bit integer value from a given\n   user space address.  If the user space data is not accessible, an\n   error will occur.\n\n\n\n" },
    { "name": "user_uint8_error", "doc": "## Name\nfunction::user_uint8_error — \n     Retrieves a unsigned 8-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint8_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 8-bit integer from\n\n\n\n## Description\nReturns the unsigned 8-bit integer value from a given\n   user space address.  If the user space data is not accessible, an\n   error will occur.\n\n\n\n" },
    { "name": "user_ulong_error", "doc": "## Name\nfunction::user_ulong_error — \n     Retrieves a unsigned long value stored in user space\n\n\n\n## Synopsis\n\n\n    user_ulong_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned long from\n\n\n\n## Description\nReturns the unsigned long value from a given user space\n   address.  If the user space data is not accessible, an error will\n   occur.  Note that the size of the unsigned long depends on the architecture\n   of the current user space task (for those architectures that\n   support both 64/32 bit compat tasks).\n\n\n\n" },
    { "name": "user_ulong_warn", "doc": "## Name\nfunction::user_ulong_warn — \n     Retrieves an unsigned long value stored in user space\n\n\n\n## Synopsis\n\n\n    user_ulong_warn:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned long from\n\n\n\n## Description\nReturns the unsigned long value from a given user\n   space address.  Returns zero when user space data is not accessible\n   and warns about the failure (but does not error).  Note that the\n   size of the unsigned long depends on the architecture of the\n   current user space task (for those architectures that support both\n   64/32 bit compat tasks).\n\n\n\n" },
    { "name": "user_ushort", "doc": "## Name\nfunction::user_ushort — \n     Retrieves an unsigned short value stored in user space\n\n\n\n## Synopsis\n\n\n    user_ushort:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned short from\n\n\n\n## Description\nReturns the unsigned short value from a given user\n   space address.  Returns zero when user space data is not accessible.\n\n\n\n" },
    { "name": "user_ushort_error", "doc": "## Name\nfunction::user_ushort_error — \n     Retrieves an unsigned short value stored in user space\n\n\n\n## Synopsis\n\n\n    user_ushort_error:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned short from\n\n\n\n## Description\nReturns the unsigned short value from a given user\n   space address.  If the user space data is not accessible, an error\n   will occur.\n\n\n\n" },
    { "name": "user_string_n_quoted", "doc": "## Name\nfunction::user_string_n_quoted — \n     Retrieves and quotes string from user space\n\n\n\n## Synopsis\n\n\n1) user_string_n_quoted:string(addr:long,n:long)2) user_string_n_quoted:string(addr:long,inlen:long,outlen:long)\n\n## Arguments\nthe user space address to retrieve the string from\n    \n     the maximum length of the string (if not null terminated)\n    \n     the maximum length of the string to read (if not null terminated)\n    \n     the maximum length of the output string\n\n\n\n## Description\n1) Returns up to n characters of a C string from the given\n   user space memory address where any ASCII characters that are not\n   printable are replaced by the corresponding escape sequence in the\n   returned string. Note that the string will be surrounded by double quotes.\n   On the rare cases when userspace data is not accessible at the given address,\n   the address itself is returned as a string, without double quotes.2) Reads up to inlen characters of a C string from the given user\n   space memory address, and returns up to outlen characters, where any ASCII\n   characters that are not printable are replaced by the corresponding escape\n   sequence in the returned string. Note that the string will be surrounded by\n   double quotes.  On the rare cases when userspace data is not accessible at\n   the given address, the address itself is returned as a string, without\n   double quotes.\n\n\n\n" },
    { "name": "user_ushort_warn", "doc": "## Name\nfunction::user_ushort_warn — \n     Retrieves an unsigned short value stored in user space\n\n\n\n## Synopsis\n\n\n    user_ushort_warn:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned short from\n\n\n\n## Description\nReturns the unsigned short value from a given user\n   space address.  Returns zero when user space data is not accessible\n   and warns about the failure (but does not error).\n\n\n\n" },
    { "name": "set_kernel_char", "doc": "## Name\nfunction::set_kernel_char — \n     Writes a char value to kernel memory\n\n\n\n## Synopsis\n\n\n    set_kernel_char(addr:long,val:long)\n\n\n## Arguments\nThe kernel address to write the char to\n    \n     The char which is to be written\n\n\n\n## Description\nWrites the char value to a given kernel memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_kernel_int", "doc": "## Name\nfunction::set_kernel_int — \n     Writes an int value to kernel memory\n\n\n\n## Synopsis\n\n\n    set_kernel_int(addr:long,val:long)\n\n\n## Arguments\nThe kernel address to write the int to\n    \n     The int which is to be written\n\n\n\n## Description\nWrites the int value to a given kernel memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_kernel_long", "doc": "## Name\nfunction::set_kernel_long — \n     Writes a long value to kernel memory\n\n\n\n## Synopsis\n\n\n    set_kernel_long(addr:long,val:long)\n\n\n## Arguments\nThe kernel address to write the long to\n    \n     The long which is to be written\n\n\n\n## Description\nWrites the long value to a given kernel memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_kernel_pointer", "doc": "## Name\nfunction::set_kernel_pointer — \n     Writes a pointer value to kernel memory.\n\n\n\n## Synopsis\n\n\n    set_kernel_pointer(addr:long,val:long)\n\n\n## Arguments\nThe kernel address to write the pointer to\n    \n     The pointer which is to be written\n\n\n\n## Description\nWrites the pointer value to a given kernel memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_kernel_short", "doc": "## Name\nfunction::set_kernel_short — \n     Writes a short value to kernel memory\n\n\n\n## Synopsis\n\n\n    set_kernel_short(addr:long,val:long)\n\n\n## Arguments\nThe kernel address to write the short to\n    \n     The short which is to be written\n\n\n\n## Description\nWrites the short value to a given kernel memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_user_char", "doc": "## Name\nfunction::set_user_char — \n     Writes a char value to user memory\n\n\n\n## Synopsis\n\n\n    set_user_char(addr:long,val:long)\n\n\n## Arguments\nThe user address to write the char to\n    \n     The char which is to be written\n\n\n\n## Description\nWrites the char value to a given user memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_kernel_string_n", "doc": "## Name\nfunction::set_kernel_string_n — \n     Writes a string of given length to kernel memory\n\n\n\n## Synopsis\n\n\n    set_kernel_string_n(addr:long,n:long,val:string)\n\n\n## Arguments\nThe kernel address to write the string to\n    \n     The maximum length of the string\n    \n     The string which is to be written\n\n\n\n## Description\nWrites the given string up to a maximum given length to a\n   given kernel memory address. Reports an error on string copy fault.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_user_int", "doc": "## Name\nfunction::set_user_int — \n     Writes an int value to user memory\n\n\n\n## Synopsis\n\n\n    set_user_int(addr:long,val:long)\n\n\n## Arguments\nThe user address to write the int to\n    \n     The int which is to be written\n\n\n\n## Description\nWrites the int value to a given user memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_user_pointer", "doc": "## Name\nfunction::set_user_pointer — \n     Writes a pointer value to user memory.\n\n\n\n## Synopsis\n\n\n    set_user_pointer(addr:long,val:long)\n\n\n## Arguments\nThe user address to write the pointer to\n    \n     The pointer which is to be written\n\n\n\n## Description\nWrites the pointer value to a given user memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_user_short", "doc": "## Name\nfunction::set_user_short — \n     Writes a short value to user memory\n\n\n\n## Synopsis\n\n\n    set_user_short(addr:long,val:long)\n\n\n## Arguments\nThe user address to write the short to\n    \n     The short which is to be written\n\n\n\n## Description\nWrites the short value to a given user memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "set_user_string_n", "doc": "## Name\nfunction::set_user_string_n — \n     Writes a string of given length to user memory\n\n\n\n## Synopsis\n\n\n    set_user_string_n(addr:long,n:long,val:string)\n\n\n## Arguments\nThe user address to write the string to\n    \n     The maximum length of the string\n    \n     The string which is to be written\n\n\n\n## Description\nWrites the given string up to a maximum given length to a given\n   user memory address. Reports an error on string copy fault.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "user_uint8", "doc": "## Name\nfunction::user_uint8 — \n     Retrieves a unsigned 8-bit integer value stored in user space\n\n\n\n## Synopsis\n\n\n    user_uint8:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned 8-bit integer from\n\n\n\n## Description\nReturns the unsigned 8-bit integer value from a given\n   user space address.  Returns zero when user space data is not\n   accessible.\n\n\n\n" },
    { "name": "set_user_string", "doc": "## Name\nfunction::set_user_string — \n  Writes a string to user memory\n\n\n\n## Synopsis\n\n\n    set_user_string(addr:long,val:string)\n\n\n## Arguments\nThe user address to write the string to\n    \n     The string which is to be written\n\n\n\n## Description\nWrites the given string to a given user memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "mdelay", "doc": "## Name\nfunction::mdelay — \n  millisecond delay\n\n\n\n## Synopsis\n\n\n    mdelay(ms:long)\n\n\n## Arguments\nNumber of milliseconds to delay.\n\n\n\n## Description\nThis function inserts a multi-millisecond busy-delay into a probe handler.\n   It requires guru mode.\n\n\n\n" },
    { "name": "user_ulong", "doc": "## Name\nfunction::user_ulong — \n     Retrieves an unsigned long value stored in user space\n\n\n\n## Synopsis\n\n\n    user_ulong:long(addr:long)\n\n\n## Arguments\nthe user space address to retrieve the unsigned long from\n\n\n\n## Description\nReturns the unsigned long value from a given user\n   space address. Returns zero when user space data is not\n   accessible. Note that the size of the unsigned long depends on the\n   architecture of the current user space task (for those\n   architectures that support both 64/32 bit compat tasks).\n\n\n\n" },
    { "name": "set_user_long", "doc": "## Name\nfunction::set_user_long — \n     Writes a long value to user memory\n\n\n\n## Synopsis\n\n\n    set_user_long(addr:long,val:long)\n\n\n## Arguments\nThe user address to write the long to\n    \n     The long which is to be written\n\n\n\n## Description\nWrites the long value to a given user memory address.\n   Reports an error when writing to the given address fails.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "raise", "doc": "## Name\nfunction::raise — \n  raise a signal in the current thread\n\n\n\n## Synopsis\n\n\n    raise(signo:long)\n\n\n## Arguments\nsignal number\n\n\n\n## Description\nThis function calls the kernel send_sig routine on\n   the current thread, with the given raw unchecked signal number.\n   It may raise an error if send_sig failed.\n   It requires guru mode.\n\n\n\n" },
    { "name": "udelay", "doc": "## Name\nfunction::udelay — \n     microsecond delay\n\n\n\n## Synopsis\n\n\n    udelay(us:long)\n\n\n## Arguments\nNumber of microseconds to delay.\n\n\n\n## Description\nThis function inserts a multi-microsecond busy-delay into a probe handler.\n   It requires guru mode.\n\n\n\n" },
    { "name": "isdigit", "doc": "## Name\nfunction::isdigit — \n     Checks for a digit\n\n\n\n## Synopsis\n\n\n    isdigit:long(str:string)\n\n\n## Arguments\nstring to check\n\n\n\n## Description\nChecks for a digit (0 through 9) as the first\n   character of a string.  Returns non-zero if true, and a zero if\n   false.\n\n\n\n" },
    { "name": "isinstr", "doc": "## Name\nfunction::isinstr — \n     Returns whether a string is a substring of another string\n\n\n\n## Synopsis\n\n\n    isinstr:long(s1:string,s2:string)\n\n\n## Arguments\nstring to search in\n    \n     substring to find\n\n\n\n## Description\nThis function returns 1 if string s1 contains s2,\n   otherwise zero.\n\n\n\n" },
    { "name": "matched", "doc": "## Name\nfunction::matched — \n     Return a given matched subexpression.\n\n\n\n## Synopsis\n\n\n    matched:string(n:long)\n\n\n## Arguments\nindex to the subexpression to return. 0 corresponds to the\n     entire regular expression.\n\n\n\n## Description\nreturns the content of the n'th subexpression of the\n   last successful use of the =~ regex matching operator. Returns an\n   empty string if the n'th subexpression was not matched (e.g. due to\n   alternation). Throws an error if the last use of =~ was a failed\n   match, or if fewer than n subexpressions are present in the\n   original regexp.\n\n\n\n" },
    { "name": "panic", "doc": "## Name\nfunction::panic — \n  trigger a panic\n\n\n\n## Synopsis\n\n\n    panic(msg:string)\n\n\n## Arguments\nmessage to pass to kernel's panic function\n\n\n\n## Description\nThis function triggers an immediate panic of the running\n   kernel with a user-specified panic message.\n   It requires guru mode.\n\n\n\n" },
    { "name": "matched_str", "doc": "## Name\nfunction::matched_str — \n  Return the last matched string.\n\n\n\n## Synopsis\n\n\n    matched_str:string()\n\n\n## Arguments\nNone\n\n\n\n## Description\nreturns the string matched by the last successful\n   use of the =~ regexp matching operator. Returns an error if the\n   last use of =~ led to a failed match.\n\n\n\n" },
    { "name": "str_replace", "doc": "## Name\nfunction::str_replace — \n     str_replace Replaces all instances of a substring with another\n\n\n\n## Synopsis\n\n\n    str_replace:string(prnt_str:string,srch_str:string,rplc_str:string)\n\n\n## Arguments\nthe string to search and replace in\n    \n     the substring which is used to search in prnt_str string\n    \n     the substring which is used to replace srch_str\n\n\n\n## Description\nThis function returns the given string with\n   substrings replaced.\n\n\n\n" },
    { "name": "string_quoted", "doc": "## Name\nfunction::string_quoted — \n     Quotes a given string\n\n\n\n## Synopsis\n\n\n    string_quoted:string(str:string)\n\n\n## Arguments\nThe kernel address to retrieve the string from\n\n\n\n## Description\nReturns the quoted string version of the given string,\n   with characters where any ASCII characters that are not printable\n   are replaced by the corresponding escape sequence in the returned\n   string. Note that the string will be surrounded by double quotes.\n\n\n\n" },
    { "name": "set_kernel_string", "doc": "## Name\nfunction::set_kernel_string — \n  Writes a string to kernel memory\n\n\n\n## Synopsis\n\n\n    set_kernel_string(addr:long,val:string)\n\n\n## Arguments\nThe kernel address to write the string to\n    \n     The string which is to be written\n\n\n\n## Description\nWrites the given string to a given kernel\n   memory address. Reports an error on string copy fault.\n   Requires the use of guru mode (-g).\n\n\n\n" },
    { "name": "strlen", "doc": "## Name\nfunction::strlen — \n  Returns the length of a string\n\n\n\n## Synopsis\n\n\n    strlen:long(s:string)\n\n\n## Arguments\nthe string\n\n\n\n## Description\nThis function returns the length of the string, which\n   can be zero up to MAXSTRINGLEN.\n\n\n\n" },
    { "name": "ngroups", "doc": "## Name\nfunction::ngroups — \n     Number of subexpressions in the last match.\n\n\n\n## Synopsis\n\n\n    ngroups:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nreturns the number of subexpressions from the\n   last successful use of the =~ regex matching operator.\n   \n\n   Note that this number includes subexpressions which are present in\n   the regex but did not match any string; for example, given the\n   regex “a|(b)”, the subexpressions will count the group for (b)\n   regardless of whether it matched a string or not. Throws an error\n   if the last use of =~ was a failed match.\n\n\n\n" },
    { "name": "strpos", "doc": "## Name\nfunction::strpos — \n     Returns location of a substring within another string\n\n\n\n## Synopsis\n\n\n    strpos:long(s1:string,s2:string)\n\n\n## Arguments\nstring to search in\n    \n     substring to find\n\n\n\n## Description\nThis function returns location of the first occurence of string\n   s2 within s1, namely the return value is 0 in case s2 is a prefix of s1.\n   If s2 is not a substring of s1, then the return value is -1.\n\n\n\n" },
    { "name": "strtol", "doc": "## Name\nfunction::strtol — \n     strtol - Convert a string to a long\n\n\n\n## Synopsis\n\n\n    strtol:long(str:string,base:long)\n\n\n## Arguments\nstring to convert\n    \n     the base to use\n\n\n\n## Description\nThis function converts the string representation of a number to an integer. \n   The base parameter indicates the number base to assume for the string (eg. 16 for hex, 8 for octal, 2 for binary).\n\n\n\n" },
    { "name": "substr", "doc": "## Name\nfunction::substr — \n     Returns a substring\n\n\n\n## Synopsis\n\n\n    substr:string(str:string,start:long,length:long)\n\n\n## Arguments\nthe string to take a substring from\n    \n     starting position of the extracted string (first character is 0)\n    \n     length of string to return\n\n\n\n## Description\nReturns the substring of the given string at the given\n   start position with the given length (or smaller if the length of the\n   original string is less than start + length, or length is bigger than\n   MAXSTRINGLEN).\n\n\n\n" },
    { "name": "text_str", "doc": "## Name\nfunction::text_str — \n     Escape any non-printable chars in a string\n\n\n\n## Synopsis\n\n\n    text_str:string(input:string)\n\n\n## Arguments\nthe string to escape\n\n\n\n## Description\nThis function accepts a string argument, \n   and any ASCII characters that are not\n   printable are replaced by the corresponding escape sequence in the\n   returned string.\n\n\n\n" },
    { "name": "text_strn", "doc": "## Name\nfunction::text_strn — \n     Escape any non-printable chars in a string\n\n\n\n## Synopsis\n\n\n    text_strn:string(input:string,len:long,quoted:long)\n\n\n## Arguments\nthe string to escape\n    \n     maximum length of string to return (0 implies MAXSTRINGLEN)\n    \n     put double quotes around the string. If input string is\n     truncated it will have “...” after the second quote\n\n\n\n## Description\nThis function accepts a string of designated length,\n   and any ASCII characters that are not\n   printable are replaced by the corresponding escape sequence in the\n   returned string.\n\n\n\n" },
    { "name": "tokenize", "doc": "## Name\nfunction::tokenize — \n  Return the next non-empty token in a string\n\n\n\n## Synopsis\n\n\n1) tokenize:string(delim:string)2) tokenize:string(input:string,delim:string)\n\n## Arguments\nset of characters that delimit the tokens\n    \n     string to tokenize. If empty, returns the next non-empty token\n     in the string passed in the previous call to tokenize.\n\n\n\n## Description\n1) This function returns the next token in the string\n   passed in the previous call to tokenize. If no delimiter is found,\n   the entire remaining input string is * returned. It returns empty\n   when no more tokens are available.2) This function returns the next non-empty token in the\n   given input string, where the tokens are delimited by characters in\n   the delim string.  If the input string is non-empty, it returns the\n   first token.  If the input string is empty, it returns the next\n   token in the string passed in the previous call to tokenize.\n   If no delimiter is found, the entire remaining input string is \n   returned. It returns empty when no more tokens are available.\n\n\n\n" },
    { "name": "ansi_clear_screen", "doc": "## Name\nfunction::ansi_clear_screen — \n  Move cursor to top left and clear screen.\n\n\n\n## Synopsis\n\n\n    ansi_clear_screen()\n\n\n## Arguments\nNone\n\n\n\n## Description\nSends ansi code for moving cursor to top left and then the\n   ansi code for clearing the screen from the cursor position to the end.\n\n\n\n" },
    { "name": "ansi_cursor_hide", "doc": "## Name\nfunction::ansi_cursor_hide — \n     Hides the cursor.\n\n\n\n## Synopsis\n\n\n    ansi_cursor_hide()\n\n\n## Arguments\nNone\n\n\n\n## Description\nSends ansi code for hiding the cursor.\n\n\n\n" },
    { "name": "ansi_cursor_move", "doc": "## Name\nfunction::ansi_cursor_move — \n     Move cursor to new coordinates.\n\n\n\n## Synopsis\n\n\n    ansi_cursor_move(x:long,y:long)\n\n\n## Arguments\nRow to move the cursor to.\n    \n     Colomn to move the cursor to.\n\n\n\n## Description\nSends ansi code for positioning the cursor at row x\n   and column y. Coordinates start at one, (1,1) is the top-left corner.\n\n\n\n" },
    { "name": "ansi_cursor_restore", "doc": "## Name\nfunction::ansi_cursor_restore — \n     Restores a previously saved cursor position.\n\n\n\n## Synopsis\n\n\n    ansi_cursor_restore()\n\n\n## Arguments\nNone\n\n\n\n## Description\nSends ansi code for restoring the current cursor position\n   previously saved with ansi_cursor_save.\n\n\n\n" },
    { "name": "ansi_cursor_save", "doc": "## Name\nfunction::ansi_cursor_save — \n     Saves the cursor position.\n\n\n\n## Synopsis\n\n\n    ansi_cursor_save()\n\n\n## Arguments\nNone\n\n\n\n## Description\nSends ansi code for saving the current cursor position.\n\n\n\n" },
    { "name": "ansi_new_line", "doc": "## Name\nfunction::ansi_new_line — \n     Move cursor to new line.\n\n\n\n## Synopsis\n\n\n    ansi_new_line()\n\n\n## Arguments\nNone\n\n\n\n## Description\nSends ansi code new line.\n\n\n\n" },
    { "name": "ansi_cursor_show", "doc": "## Name\nfunction::ansi_cursor_show — \n     Shows the cursor.\n\n\n\n## Synopsis\n\n\n    ansi_cursor_show()\n\n\n## Arguments\nNone\n\n\n\n## Description\nSends ansi code for showing the cursor.\n\n\n\n" },
    { "name": "ansi_set_color", "doc": "## Name\nfunction::ansi_set_color — \n     Set the ansi Select Graphic Rendition mode.\n\n\n\n## Synopsis\n\n\n1) ansi_set_color(fg:long)2) ansi_set_color(fg:long,bg:long)3) ansi_set_color(fg:long,bg:long,attr:long)\n\n## Arguments\nForeground color to set.\n    \n     Background color to set.\n    \n     Color attribute to set.\n\n\n\n## Description\n1) Sends ansi code for Select Graphic Rendition mode for the\n   given forground color. Black (30), Blue (34), Green (32), Cyan (36),\n   Red (31), Purple (35), Brown (33), Light Gray (37).2) Sends ansi code for Select Graphic Rendition mode for the\n   given forground color, Black (30), Blue (34), Green (32), Cyan (36),\n   Red (31), Purple (35), Brown (33), Light Gray (37) and the given\n   background color, Black (40), Red (41), Green (42), Yellow (43),\n   Blue (44), Magenta (45), Cyan (46), White (47).3) Sends ansi code for Select Graphic Rendition mode for the\n   given forground color, Black (30), Blue (34), Green (32), Cyan (36),\n   Red (31), Purple (35), Brown (33), Light Gray (37), the given\n   background color, Black (40), Red (41), Green (42), Yellow (43),\n   Blue (44), Magenta (45), Cyan (46), White (47) and the color attribute\n   All attributes off (0), Intensity Bold (1), Underline Single (4),\n   Blink Slow (5), Blink Rapid (6), Image Negative (7).\n\n\n\n" },
    { "name": "ansi_reset_color", "doc": "## Name\nfunction::ansi_reset_color — \n     Resets Select Graphic Rendition mode.\n\n\n\n## Synopsis\n\n\n    ansi_reset_color()\n\n\n## Arguments\nNone\n\n\n\n## Description\nSends ansi code to reset foreground, background and color\n   attribute to default values.\n\n\n\n" },
    { "name": "stringat", "doc": "## Name\nfunction::stringat — \n     Returns the char at a given position in the string\n\n\n\n## Synopsis\n\n\n    stringat:long(str:string,pos:long)\n\n\n## Arguments\nthe string to fetch the character from\n    \n     the position to get the character from  (first character is 0)\n\n\n\n## Description\nThis function returns the character at a given position in\n   the string or zero if the string doesn't have as many characters. Reports\n   an error if pos is out of bounds.\n\n\n\n" },
    { "name": "indent", "doc": "## Name\nfunction::indent — \n     returns an amount of space to indent\n\n\n\n## Synopsis\n\n\n    indent:string(delta:long)\n\n\n## Arguments\nthe amount of space added/removed for each call\n\n\n\n## Description\nThis function returns a string with appropriate\n   indentation. Call it with a small positive or matching negative\n   delta. Unlike the thread_indent function, the indent does not\n   track individual indent values on a per thread basis.\n\n\n\n" },
    { "name": "indent_depth", "doc": "## Name\nfunction::indent_depth — \n     returns the global nested-depth\n\n\n\n## Synopsis\n\n\n    indent_depth:long(delta:long)\n\n\n## Arguments\nthe amount of depth added/removed for each call\n\n\n\n## Description\nThis function returns a number for appropriate indentation,\n   similar to indent. Call it with a small positive or matching negative\n   delta. Unlike the thread_indent_depth function, the indent does not track\n   individual indent values on a per thread basis.\n\n\n\n" },
    { "name": "thread_indent", "doc": "## Name\nfunction::thread_indent — \n  returns an amount of space with the current task information\n\n\n\n## Synopsis\n\n\n    thread_indent:string(delta:long)\n\n\n## Arguments\nthe amount of space added/removed for each call\n\n\n\n## Description\nThis function returns a string with appropriate\n   indentation for a thread. Call it with a small positive or\n   matching negative delta. If this is the real outermost,\n   initial level of indentation, then the function resets the \n   relative timestamp base to zero.  The timestamp is as per\n   provided by the __indent_timestamp function, which by default\n   measures microseconds.\n\n\n\n" },
    { "name": "thread_indent_depth", "doc": "## Name\nfunction::thread_indent_depth — \n     returns the nested-depth of the current task\n\n\n\n## Synopsis\n\n\n    thread_indent_depth:long(delta:long)\n\n\n## Arguments\nthe amount of depth added/removed for each call\n\n\n\n## Description\nThis function returns an integer equal to the nested\n   function-call depth starting from the outermost initial level. This function\n   is useful for saving space (consumed by whitespace) in traces with long\n   nested function calls. Use this function in a similar fashion to\n   thread_indent, i.e., in call-probe, use thread_indent_depth(1) and in\n   return-probe, use thread_indent_depth(-1)\n\n\n\n" },
    { "name": "nfsderror", "doc": "## Name\nfunction::nfsderror — \n  Convert nfsd error number into string\n\n\n\n## Synopsis\n\n\n    nfsderror:string(err:long)\n\n\n## Arguments\nerrnum\n\n\n\n## Description\nThis function returns a string for the error number\n   passed into the function.\n\n\n\n" },
    { "name": "commit", "doc": "## Name\nfunction::commit — \n     Write out all output related to a speculation buffer\n\n\n\n## Synopsis\n\n\n    commit(id:long)\n\n\n## Arguments\nof the buffer to store the information in\n\n\n\n## Description\nOutput all the output for id in the order that it was entered into\n   the speculative buffer by speculative.\n\n\n\n" },
    { "name": "discard", "doc": "## Name\nfunction::discard — \n     Discard all output related to a speculation buffer\n\n\n\n## Synopsis\n\n\n    discard(id:long)\n\n\n## Arguments\nof the buffer to store the information in\n\n\n\n" },
    { "name": "speculate", "doc": "## Name\nfunction::speculate — \n     Store a string for possible output later\n\n\n\n## Synopsis\n\n\n    speculate(id:long,output:string)\n\n\n## Arguments\nbuffer id to store the information in\n    \n     string to write out when commit occurs\n\n\n\n## Description\nAdd a string to the speculaive buffer for id.\n\n\n\n" },
    { "name": "speculation", "doc": "## Name\nfunction::speculation — \n  Allocate a new id for speculative output\n\n\n\n## Synopsis\n\n\n    speculation:long()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThe speculation function is called when a new speculation buffer is needed.\n   It returns an id for the speculative output.\n   There can be multiple threads being speculated on concurrently.\n   This id is used by other speculation functions to keep the threads\n   separate.\n\n\n\n" },
    { "name": "json_add_array", "doc": "## Name\nfunction::json_add_array — \n     Add an array\n\n\n\n## Synopsis\n\n\n    json_add_array:long(name:string,description:string)\n\n\n## Arguments\nThe name of the array.\n    \n     Array description. An empty string can be used.\n\n\n\n## Description\nThis function adds a array, setting up everything\n   needed. Arrays contain other metrics, added with\n   json_add_array_numeric_metric or json_add_array_string_metric.\n\n\n\n" },
    { "name": "json_add_array_numeric_metric", "doc": "## Name\nfunction::json_add_array_numeric_metric — \n     Add a numeric metric to an array\n\n\n\n## Synopsis\n\n\n    json_add_array_numeric_metric:long(array_name:string,metric_name:string,metric_description:string,metric_units:string)\n\n\n## Arguments\nThe name of the array the numeric metric should be\n     added to.\n    \n     The name of the numeric metric.\n    \n     Metric description. An empty string can be used.\n    \n     Metic units. An empty string can be used.\n\n\n\n## Description\nThis function adds a numeric metric to an array,\n   setting up everything needed.\n\n\n\n" },
    { "name": "json_add_array_string_metric", "doc": "## Name\nfunction::json_add_array_string_metric — \n     Add a string metric to an array\n\n\n\n## Synopsis\n\n\n    json_add_array_string_metric:long(array_name:string,metric_name:string,metric_description:string)\n\n\n## Arguments\nThe name of the array the string metric should be\n     added to.\n    \n     The name of the string metric.\n    \n     Metric description. An empty string can be used.\n\n\n\n## Description\nThis function adds a string metric to an array,\n   setting up everything needed.\n\n\n\n" },
    { "name": "json_add_string_metric", "doc": "## Name\nfunction::json_add_string_metric — \n     Add a string metric\n\n\n\n## Synopsis\n\n\n    json_add_string_metric:long(name:string,description:string)\n\n\n## Arguments\nThe name of the string metric.\n    \n     Metric description. An empty string can be used.\n\n\n\n## Description\nThis function adds a string metric, setting up\n   everything needed.\n\n\n\n" },
    { "name": "json_add_numeric_metric", "doc": "## Name\nfunction::json_add_numeric_metric — \n     Add a numeric metric\n\n\n\n## Synopsis\n\n\n    json_add_numeric_metric:long(name:string,description:string,units:string)\n\n\n## Arguments\nThe name of the numeric metric.\n    \n     Metric description. An empty string can be used.\n    \n     Metic units. An empty string can be used.\n\n\n\n## Description\nThis function adds a numeric metric, setting up\n   everything needed.\n\n\n\n" },
    { "name": "json_set_prefix", "doc": "## Name\nfunction::json_set_prefix — \n  Set the metric prefix.\n\n\n\n## Synopsis\n\n\n    json_set_prefix:long(prefix:string)\n\n\n## Arguments\nThe prefix name to be used.\n\n\n\n## Description\nThis function sets the “prefix”, which is the name\n   of the base of the metric hierarchy. Calling this function is\n   optional, by default the name of the systemtap module is used.\n\n\n\n" },
    { "name": "switch_file", "doc": "## Name\nfunction::switch_file — \n  switch to the next output file\n\n\n\n## Synopsis\n\n\n    switch_file()\n\n\n## Arguments\nNone\n\n\n\n## Description\nThis function sends a signal to the stapio process,\n   commanding it to rotate to the next output file when output is\n   sent to file(s).\n\n\n\n" },
];
