{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SystemTap",
	"patterns": [
		{
			"include": "#general"
		}
	],
	"repository": {
		"general": {
			"patterns": [
				{
					"include": "#embedded"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#keyword"
				},
				{
					"include": "#stap_keyword"
				},
				{
					"include": "#function_dec"
				},
				{
					"include": "#probe_dec"
				},
				{
					"include": "#macro"
				},
				{
					"include": "#expr"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.control.systemtap",
					"match": "(global)"
				},
				{
					"name": "keyword.control.systemtap",
					"match": "(string|log)"
				},
				{
					"name": "keyword.operator.logical.systemtap",
					"match": "(\\&|\\||\\^|\\!)"
				},
				{
					"name": "keyword.operator.assignment.compound.systemtap",
					"match": "(\\+=|-=|\\*=|/=|%=)"
				},
				{
					"name": "punctuation.separator.pointer-access.systemtap",
					"match": "(->)"
				},
				{
					"name": "keyword.operator.comparison.systemtap",
					"match": "(<=?|>=?|==|!=)"
				},
				{
					"name": "keyword.operator.arithmetic.systemtap",
					"match": "(\\+|-|\\*|/|%)"
				},
				{
					"name": "keyword.operator.increment.systemtap",
					"match": "(\\+\\+)"
				},
				{
					"name": "keyword.operator.decrement.systemtap",
					"match": "(--)"
				},
				{
					"name": "keyword.operator.assignment.systemtap",
					"match": "(=)"
				}
			]
		},
		"stap_keyword": {
			"name": "meta.systemtap.block",
			"patterns": [
				{
					"name": "keyword.control.systemtap.repeat",
					"match": "(while|for|foreach|in|limit)(?=[^@a-zA-z0-9_$])"
				},
				{
					"name": "keyword.control.systemtap.statement",
					"match": "(for|break|continue|return|next|delete|try|catch)(?=[^@a-zA-z0-9_$])"
				},
				{
					"name": "keyword.control.systemtap.conditional",
					"match": "(if|else)(?=[^@a-zA-z0-9_$])"
				},
				{
					"name": "storage.type.built-in.systemtap",
					"match": "(long|string)"
				}
			]
		},
		"expr": {
			"patterns": [
				{
					"include": "#embedded"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#string_context"
				},
				{
					"include": "#function_call"
				},
				{
					"include": "#number"
				},
				{
					"include": "#const"
				},
				{
					"include": "#variable"
				},
				{
					"include": "#array"
				}
			]
		},
		"function_call": {
			"begin": "(@?[a-zA-Z0-9_$]+\\s*(?=\\())",
			"end": "(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.systemtap"
				}
			},
			"patterns": [
				{
					"include": "#expr"
				}
			]
		},
		"const": {
			"name": "variable.other.constant.systemtap",
			"match": "(@?[A-Z0-9_$]+(?=[^a-zA-Z0-9_$]))"
		},
		"variable": {
			"name": "variable.other.systemtap",
			"match": "(@?[a-zA-Z0-9_$]+(?=[^a-zA-Z0-9_$]))"
		},
		"array": {},
		"function_dec": {
			"begin": "(function)\\s([\\w.]+)",
			"end": "(?=\\%?{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.systemtap"
				},
				"2": {
					"name": "entity.name.function.definition.systemtap"
				}
			},
			"patterns": [
				{
					"begin": "(\\()",
					"end": "(?=[)])",
					"patterns": [
						{
							"match": "(?<=:)([^\\s,):]+)",
							"name": "storage.type.built-in.systemtap"
						},
						{
							"match": "[^\\s,):]+",
							"name": "variable.parameter"
						}
					]
				}
			]
		},
		"probe_dec": {
			"begin": "(probe)\\s+(?![#\\{]+)",
			"end": "(?=\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.systemtap"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"match": "(process|function|module|statement|begin|end|syscall|return|call|never)(?![@a-zA-Z0-9_$])",
					"name": "keyword.control.systemtap"
				},
				{
					"match": "([\\w]+)",
					"name": "entity.name.function.definition.systemtap"
				},
				{
					"match": "(\\.)",
					"name": "punctuation.separator.dot.systemtap"
				},
				{
					"begin": "(\\()",
					"end": "(?=[)])",
					"patterns": [
						{
							"include": "#expr"
						},
						{
							"match": "[^\\s,)]+",
							"name": "variable.parameter"
						}
					]
				},
				{
					"match": "([*!?])",
					"name": "keyword.operator.systemtap"
				}
			]
		},
		"string_context": {
			"patterns": [
				{
					"name": "string.quoted.double.systemtap",
					"begin": "(((?:u|u8|U|L)?)\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.systemtap"
						},
						"2": {
							"name": "meta.encoding.systemtap"
						}
					},
					"end": "(\")",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.systemtap"
						}
					},
					"patterns": [
						{
							"match": "(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8})",
							"name": "constant.character.escape.systemtap"
						},
						{
							"match": "\\\\['\"?\\\\abfnrtv]",
							"name": "constant.character.escape.systemtap"
						},
						{
							"match": "\\\\[0-7]{1,3}",
							"name": "constant.character.escape.systemtap"
						},
						{
							"match": "\\\\x[0-9a-fA-F]{2,2}",
							"name": "constant.character.escape.systemtap"
						},
						{
							"include": "#string_escapes_context_c"
						}
					]
				},
				{
					"name": "string.quoted.single.systemtap",
					"begin": "((?<![0-9A-Fa-f])((?:u|u8|U|L)?)')",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.systemtap"
						},
						"2": {
							"name": "meta.encoding.systemtap"
						}
					},
					"end": "(')",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.systemtap"
						}
					},
					"patterns": [
						{
							"include": "#string_escapes_context_c"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"patterns": [
						{
							"name": "string.quoted.double.raw.regex.systemtap",
							"begin": "(((?:[uUL]8?)?R)\\\"(?:(?:_r|re)|regex)\\()",
							"beginCaptures": {
								"1": {
									"name": "punctuation.definition.string.begin.systemtap"
								},
								"2": {
									"name": "meta.encoding.systemtap"
								}
							},
							"end": "(\\)(?:(?:_r|re)|regex)\\\")",
							"endCaptures": {
								"1": {
									"name": "punctuation.definition.string.end.systemtap"
								}
							},
							"patterns": [
								{
									"include": "source.regexp.python"
								}
							]
						},
						{
							"name": "string.quoted.double.raw.sql.systemtap",
							"begin": "(((?:[uUL]8?)?R)\\\"(?:[pP]?(?:sql|SQL)|d[dm]l)\\()",
							"beginCaptures": {
								"1": {
									"name": "punctuation.definition.string.begin.systemtap"
								},
								"2": {
									"name": "meta.encoding.systemtap"
								}
							},
							"end": "(\\)(?:[pP]?(?:sql|SQL)|d[dm]l)\\\")",
							"endCaptures": {
								"1": {
									"name": "punctuation.definition.string.end.systemtap"
								}
							},
							"patterns": [
								{
									"include": "source.sql"
								}
							]
						},
						{
							"begin": "((?:u|u8|U|L)?R)\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.string.begin.systemtap"
								},
								"1": {
									"name": "meta.encoding.systemtap"
								},
								"3": {
									"name": "invalid.illegal.delimiter-too-long.systemtap"
								}
							},
							"end": "\\)\\2(\\3)\"",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.string.end.systemtap"
								},
								"1": {
									"name": "invalid.illegal.delimiter-too-long.systemtap"
								}
							},
							"name": "string.quoted.double.raw.systemtap"
						}
					]
				}
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric.hex.systemtap",
					"match": "(0x[0-9a-fA-f]+)"
				},
				{
					"name": "constant.numeric.octal.systemtap",
					"match": "(0[0-7]*)"
				},
				{
					"name": "constant.numeric.decimal.systemtap",
					"match": "(\\d+)"
				}
			]
		},
		"comment": {
			"name": "comment",
			"patterns": [
				{
					"name": "comment.line",
					"match": "//.*"
				},
				{
					"name": "comment.line",
					"match": "#.*"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"macro": {
			"begin": "(@define(?!d))",
			"end": "(?<!\\\\)(?=(?:\\%\\(|\\n))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.$1.systemtap"
				}
			},
			"patterns": [
				{
					"begin": "\\s([\\w.]+)\\s*",
					"end": "(?=(?:\\%\\(|\\n))",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.preprocessor.systemtap"
						}
					},
					"patterns": [
						{
							"begin": "(\\()",
							"end": "(?=[)])",
							"patterns": [
								{
									"match": "[^\\s,()%]+",
									"name": "variable.parameter"
								}
							]
						}
					]
				}
			]
		},
		"embedded": {
			"patterns": [
				{
					"contentName": "meta.embedded.block.c",
					"begin": "%{",
					"end": "%}",
					"patterns": [
						{
							"include": "source.c"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.systemtap"
}
